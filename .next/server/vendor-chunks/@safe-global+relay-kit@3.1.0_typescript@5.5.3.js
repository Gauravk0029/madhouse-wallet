"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@safe-global+relay-kit@3.1.0_typescript@5.5.3";
exports.ids = ["vendor-chunks/@safe-global+relay-kit@3.1.0_typescript@5.5.3"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/RelayKitBasePack.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/RelayKitBasePack.js ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RelayKitBasePack = void 0;\n/**\n * Abstract class. The base class for all RelayKit packs.\n * It provides the Safe SDK instance and the abstract methods to be implemented by the packs.\n * @abstract\n * @template EstimateFeeProps\n * @template EstimateFeeResult\n * @template CreateTransactionProps\n * @template CreateTransactionResult,\n * @template ExecuteTransactionProps\n * @template ExecuteTransactionResult\n */\nclass RelayKitBasePack {\n    /**\n     * Creates a new RelayKitBasePack instance.\n     * The packs implemented using our SDK should extend this class and therefore provide a Safe SDK instance\n     * @param {Safe} protocolKit - The Safe SDK instance\n     */\n    constructor(protocolKit) {\n        this.protocolKit = protocolKit;\n    }\n}\nexports.RelayKitBasePack = RelayKitBasePack;\n//# sourceMappingURL=RelayKitBasePack.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3JlbGF5LWtpdEAzLjEuMF90eXBlc2NyaXB0QDUuNS4zL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvcmVsYXkta2l0L2Rpc3Qvc3JjL1JlbGF5S2l0QmFzZVBhY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FmZS1wYXNza2V5cy10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FmZS1nbG9iYWwrcmVsYXkta2l0QDMuMS4wX3R5cGVzY3JpcHRANS41LjMvbm9kZV9tb2R1bGVzL0BzYWZlLWdsb2JhbC9yZWxheS1raXQvZGlzdC9zcmMvUmVsYXlLaXRCYXNlUGFjay5qcz8wZDI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZWxheUtpdEJhc2VQYWNrID0gdm9pZCAwO1xuLyoqXG4gKiBBYnN0cmFjdCBjbGFzcy4gVGhlIGJhc2UgY2xhc3MgZm9yIGFsbCBSZWxheUtpdCBwYWNrcy5cbiAqIEl0IHByb3ZpZGVzIHRoZSBTYWZlIFNESyBpbnN0YW5jZSBhbmQgdGhlIGFic3RyYWN0IG1ldGhvZHMgdG8gYmUgaW1wbGVtZW50ZWQgYnkgdGhlIHBhY2tzLlxuICogQGFic3RyYWN0XG4gKiBAdGVtcGxhdGUgRXN0aW1hdGVGZWVQcm9wc1xuICogQHRlbXBsYXRlIEVzdGltYXRlRmVlUmVzdWx0XG4gKiBAdGVtcGxhdGUgQ3JlYXRlVHJhbnNhY3Rpb25Qcm9wc1xuICogQHRlbXBsYXRlIENyZWF0ZVRyYW5zYWN0aW9uUmVzdWx0LFxuICogQHRlbXBsYXRlIEV4ZWN1dGVUcmFuc2FjdGlvblByb3BzXG4gKiBAdGVtcGxhdGUgRXhlY3V0ZVRyYW5zYWN0aW9uUmVzdWx0XG4gKi9cbmNsYXNzIFJlbGF5S2l0QmFzZVBhY2sge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgUmVsYXlLaXRCYXNlUGFjayBpbnN0YW5jZS5cbiAgICAgKiBUaGUgcGFja3MgaW1wbGVtZW50ZWQgdXNpbmcgb3VyIFNESyBzaG91bGQgZXh0ZW5kIHRoaXMgY2xhc3MgYW5kIHRoZXJlZm9yZSBwcm92aWRlIGEgU2FmZSBTREsgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge1NhZmV9IHByb3RvY29sS2l0IC0gVGhlIFNhZmUgU0RLIGluc3RhbmNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvdG9jb2xLaXQpIHtcbiAgICAgICAgdGhpcy5wcm90b2NvbEtpdCA9IHByb3RvY29sS2l0O1xuICAgIH1cbn1cbmV4cG9ydHMuUmVsYXlLaXRCYXNlUGFjayA9IFJlbGF5S2l0QmFzZVBhY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWxheUtpdEJhc2VQYWNrLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/RelayKitBasePack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/constants.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/constants.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GELATO_TRANSFER_GAS_COST = exports.GELATO_GAS_EXECUTION_OVERHEAD = exports.ZERO_ADDRESS = exports.GELATO_RELAY_URL = exports.GELATO_FEE_COLLECTOR = exports.GELATO_NATIVE_TOKEN_ADDRESS = void 0;\nexports.GELATO_NATIVE_TOKEN_ADDRESS = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';\nexports.GELATO_FEE_COLLECTOR = '0x3AC05161b76a35c1c28dC99Aa01BEd7B24cEA3bf';\nexports.GELATO_RELAY_URL = 'https://relay.gelato.digital';\nexports.ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\n// see: https://docs.gelato.network/developer-services/relay/quick-start/optional-parameters#optional-parameters\nexports.GELATO_GAS_EXECUTION_OVERHEAD = 150000;\n// gas cost of the separate ERC20 transfer to pay the fees to the Gelato relayer\nexports.GELATO_TRANSFER_GAS_COST = 15000;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3JlbGF5LWtpdEAzLjEuMF90eXBlc2NyaXB0QDUuNS4zL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvcmVsYXkta2l0L2Rpc3Qvc3JjL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0MsR0FBRyxxQ0FBcUMsR0FBRyxvQkFBb0IsR0FBRyx3QkFBd0IsR0FBRyw0QkFBNEIsR0FBRyxtQ0FBbUM7QUFDL0wsbUNBQW1DO0FBQ25DLDRCQUE0QjtBQUM1Qix3QkFBd0I7QUFDeEIsb0JBQW9CO0FBQ3BCO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0EsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FmZS1wYXNza2V5cy10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FmZS1nbG9iYWwrcmVsYXkta2l0QDMuMS4wX3R5cGVzY3JpcHRANS41LjMvbm9kZV9tb2R1bGVzL0BzYWZlLWdsb2JhbC9yZWxheS1raXQvZGlzdC9zcmMvY29uc3RhbnRzLmpzP2FmZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdFTEFUT19UUkFOU0ZFUl9HQVNfQ09TVCA9IGV4cG9ydHMuR0VMQVRPX0dBU19FWEVDVVRJT05fT1ZFUkhFQUQgPSBleHBvcnRzLlpFUk9fQUREUkVTUyA9IGV4cG9ydHMuR0VMQVRPX1JFTEFZX1VSTCA9IGV4cG9ydHMuR0VMQVRPX0ZFRV9DT0xMRUNUT1IgPSBleHBvcnRzLkdFTEFUT19OQVRJVkVfVE9LRU5fQUREUkVTUyA9IHZvaWQgMDtcbmV4cG9ydHMuR0VMQVRPX05BVElWRV9UT0tFTl9BRERSRVNTID0gJzB4RWVlZWVFZWVlRWVFZWVFZUVlRWVlRUVFZWVlZUVlZWVlZWVlRUVlRSc7XG5leHBvcnRzLkdFTEFUT19GRUVfQ09MTEVDVE9SID0gJzB4M0FDMDUxNjFiNzZhMzVjMWMyOGRDOTlBYTAxQkVkN0IyNGNFQTNiZic7XG5leHBvcnRzLkdFTEFUT19SRUxBWV9VUkwgPSAnaHR0cHM6Ly9yZWxheS5nZWxhdG8uZGlnaXRhbCc7XG5leHBvcnRzLlpFUk9fQUREUkVTUyA9ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnO1xuLy8gc2VlOiBodHRwczovL2RvY3MuZ2VsYXRvLm5ldHdvcmsvZGV2ZWxvcGVyLXNlcnZpY2VzL3JlbGF5L3F1aWNrLXN0YXJ0L29wdGlvbmFsLXBhcmFtZXRlcnMjb3B0aW9uYWwtcGFyYW1ldGVyc1xuZXhwb3J0cy5HRUxBVE9fR0FTX0VYRUNVVElPTl9PVkVSSEVBRCA9IDE1MDAwMDtcbi8vIGdhcyBjb3N0IG9mIHRoZSBzZXBhcmF0ZSBFUkMyMCB0cmFuc2ZlciB0byBwYXkgdGhlIGZlZXMgdG8gdGhlIEdlbGF0byByZWxheWVyXG5leHBvcnRzLkdFTEFUT19UUkFOU0ZFUl9HQVNfQ09TVCA9IDE1MDAwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/deprecated.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/deprecated.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=deprecated.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3JlbGF5LWtpdEAzLjEuMF90eXBlc2NyaXB0QDUuNS4zL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvcmVsYXkta2l0L2Rpc3Qvc3JjL2RlcHJlY2F0ZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYWZlLXBhc3NrZXlzLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzYWZlLWdsb2JhbCtyZWxheS1raXRAMy4xLjBfdHlwZXNjcmlwdEA1LjUuMy9ub2RlX21vZHVsZXMvQHNhZmUtZ2xvYmFsL3JlbGF5LWtpdC9kaXN0L3NyYy9kZXByZWNhdGVkLmpzPzAzNWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXByZWNhdGVkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/deprecated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/index.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/index.js ***!
  \********************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EthSafeOperation = void 0;\n__exportStar(__webpack_require__(/*! ./deprecated */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/deprecated.js\"), exports);\n__exportStar(__webpack_require__(/*! ./packs/gelato/GelatoRelayPack */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/gelato/GelatoRelayPack.js\"), exports);\n__exportStar(__webpack_require__(/*! ./packs/gelato/types */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/gelato/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./packs/safe-4337/Safe4337Pack */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/Safe4337Pack.js\"), exports);\nvar SafeOperation_1 = __webpack_require__(/*! ./packs/safe-4337/SafeOperation */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/SafeOperation.js\");\nObject.defineProperty(exports, \"EthSafeOperation\", ({ enumerable: true, get: function () { return __importDefault(SafeOperation_1).default; } }));\n__exportStar(__webpack_require__(/*! ./packs/safe-4337/estimators */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/estimators/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./packs/safe-4337/types */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./RelayKitBasePack */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/RelayKitBasePack.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3JlbGF5LWtpdEAzLjEuMF90eXBlc2NyaXB0QDUuNS4zL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvcmVsYXkta2l0L2Rpc3Qvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLGFBQWEsbUJBQU8sQ0FBQyx5SkFBYztBQUNuQyxhQUFhLG1CQUFPLENBQUMsNkxBQWdDO0FBQ3JELGFBQWEsbUJBQU8sQ0FBQyx5S0FBc0I7QUFDM0MsYUFBYSxtQkFBTyxDQUFDLDZMQUFnQztBQUNyRCxzQkFBc0IsbUJBQU8sQ0FBQywrTEFBaUM7QUFDL0Qsb0RBQW1ELEVBQUUscUNBQXFDLG9EQUFvRCxFQUFDO0FBQy9JLGFBQWEsbUJBQU8sQ0FBQywrTEFBOEI7QUFDbkQsYUFBYSxtQkFBTyxDQUFDLCtLQUF5QjtBQUM5QyxhQUFhLG1CQUFPLENBQUMscUtBQW9CO0FBQ3pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FmZS1wYXNza2V5cy10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FmZS1nbG9iYWwrcmVsYXkta2l0QDMuMS4wX3R5cGVzY3JpcHRANS41LjMvbm9kZV9tb2R1bGVzL0BzYWZlLWdsb2JhbC9yZWxheS1raXQvZGlzdC9zcmMvaW5kZXguanM/YzhhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FdGhTYWZlT3BlcmF0aW9uID0gdm9pZCAwO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2RlcHJlY2F0ZWRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3BhY2tzL2dlbGF0by9HZWxhdG9SZWxheVBhY2tcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3BhY2tzL2dlbGF0by90eXBlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcGFja3Mvc2FmZS00MzM3L1NhZmU0MzM3UGFja1wiKSwgZXhwb3J0cyk7XG52YXIgU2FmZU9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vcGFja3Mvc2FmZS00MzM3L1NhZmVPcGVyYXRpb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFdGhTYWZlT3BlcmF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2ltcG9ydERlZmF1bHQoU2FmZU9wZXJhdGlvbl8xKS5kZWZhdWx0OyB9IH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3BhY2tzL3NhZmUtNDMzNy9lc3RpbWF0b3JzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wYWNrcy9zYWZlLTQzMzcvdHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1JlbGF5S2l0QmFzZVBhY2tcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/gelato/GelatoRelayPack.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/gelato/GelatoRelayPack.js ***!
  \*******************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _GelatoRelayPack_gelatoRelay, _GelatoRelayPack_apiKey;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GelatoRelayPack = void 0;\nconst relay_sdk_1 = __webpack_require__(/*! @gelatonetwork/relay-sdk */ \"(ssr)/./node_modules/.pnpm/@gelatonetwork+relay-sdk@5.5.6/node_modules/@gelatonetwork/relay-sdk/dist/index.js\");\nconst protocol_kit_1 = __webpack_require__(/*! @safe-global/protocol-kit */ \"(ssr)/./node_modules/.pnpm/@safe-global+protocol-kit@4.1.0_typescript@5.5.3/node_modules/@safe-global/protocol-kit/dist/src/index.js\");\nconst RelayKitBasePack_1 = __webpack_require__(/*! ../../RelayKitBasePack */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/RelayKitBasePack.js\");\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/constants.js\");\nclass GelatoRelayPack extends RelayKitBasePack_1.RelayKitBasePack {\n    constructor({ apiKey, protocolKit }) {\n        super(protocolKit);\n        _GelatoRelayPack_gelatoRelay.set(this, void 0);\n        _GelatoRelayPack_apiKey.set(this, void 0);\n        __classPrivateFieldSet(this, _GelatoRelayPack_gelatoRelay, new relay_sdk_1.GelatoRelay(), \"f\");\n        __classPrivateFieldSet(this, _GelatoRelayPack_apiKey, apiKey, \"f\");\n    }\n    _getFeeToken(gasToken) {\n        return !gasToken || gasToken === constants_1.ZERO_ADDRESS ? constants_1.GELATO_NATIVE_TOKEN_ADDRESS : gasToken;\n    }\n    getFeeCollector() {\n        return constants_1.GELATO_FEE_COLLECTOR;\n    }\n    async getEstimateFee(propsOrChainId, inputGasLimit, inputGasToken) {\n        let chainId;\n        let gasLimit;\n        let gasToken;\n        if (typeof propsOrChainId === 'object') {\n            ;\n            ({ chainId, gasLimit, gasToken } = propsOrChainId);\n        }\n        else {\n            chainId = propsOrChainId;\n            gasLimit = inputGasLimit;\n            gasToken = inputGasToken;\n        }\n        const feeToken = this._getFeeToken(gasToken);\n        const estimation = await __classPrivateFieldGet(this, _GelatoRelayPack_gelatoRelay, \"f\").getEstimatedFee(chainId, feeToken, BigInt(gasLimit), false);\n        return estimation.toString();\n    }\n    async getTaskStatus(taskId) {\n        return __classPrivateFieldGet(this, _GelatoRelayPack_gelatoRelay, \"f\").getTaskStatus(taskId);\n    }\n    /**\n     * Creates a payment transaction to Gelato\n     *\n     * @private\n     * @async\n     * @function\n     * @param {string} gas - The gas amount for the payment.\n     * @param {MetaTransactionOptions} options - Options for the meta transaction.\n     * @returns {Promise<Transaction>} Promise object representing the created payment transaction.\n     *\n     */\n    async createPaymentToGelato(gas, options) {\n        const chainId = await this.protocolKit.getChainId();\n        const gelatoAddress = this.getFeeCollector();\n        const gasToken = options.gasToken ?? constants_1.ZERO_ADDRESS;\n        const paymentToGelato = await this.getEstimateFee({ chainId, gasLimit: gas, gasToken });\n        // The Gelato payment transaction\n        const transferToGelato = (0, protocol_kit_1.createERC20TokenTransferTransaction)(gasToken, gelatoAddress, paymentToGelato);\n        return transferToGelato;\n    }\n    /**\n     * @deprecated Use createTransaction instead\n     */\n    async createRelayedTransaction({ transactions, onlyCalls = false, options = {} }) {\n        return this.createTransaction({ transactions, onlyCalls, options });\n    }\n    /**\n     * Creates a Safe transaction designed to be executed using the Gelato Relayer.\n     *\n     * @param {GelatoCreateTransactionProps} options - Options for Gelato.\n     * @param {MetaTransactionData[]} [options.transactions] - The transactions batch.\n     * @param {boolean} [options.onlyCalls=false] - If true, MultiSendCallOnly contract should be used. Remember to not use delegate calls in the batch.\n     * @param {MetaTransactionOptions} [options.options={}] - Gas Options for the transaction batch.\n     * @returns {Promise<SafeTransaction>} Returns a Promise that resolves with a SafeTransaction object.\n     */\n    async createTransaction({ transactions, onlyCalls = false, options = {} }) {\n        const { isSponsored = false } = options;\n        if (isSponsored) {\n            const nonce = await this.protocolKit.getNonce();\n            const sponsoredTransaction = await this.protocolKit.createTransaction({\n                transactions,\n                onlyCalls,\n                options: {\n                    nonce\n                }\n            });\n            return sponsoredTransaction;\n        }\n        // If the ERC20 gas token does not follow the standard 18 decimals, we cannot use handlePayment to pay Gelato fees.\n        const gasToken = options.gasToken ?? constants_1.ZERO_ADDRESS;\n        const isGasTokenCompatible = await (0, protocol_kit_1.isGasTokenCompatibleWithHandlePayment)(gasToken, this.protocolKit);\n        if (!isGasTokenCompatible) {\n            // if the ERC20 gas token is not compatible (less than 18 decimals like USDC), a separate transfer is required to pay Gelato fees.\n            return this.createTransactionWithTransfer({ transactions, onlyCalls, options });\n        }\n        // If the gas token is compatible (Native token or standard ERC20), we use handlePayment function present in the Safe contract to pay Gelato fees\n        return this.createTransactionWithHandlePayment({ transactions, onlyCalls, options });\n    }\n    /**\n     * Creates a Safe transaction designed to be executed using the Gelato Relayer and\n     * uses the handlePayment function defined in the Safe contract to pay the fees\n     * to the Gelato relayer.\n     *\n     * @async\n     * @function createTransactionWithHandlePayment\n     * @param {GelatoCreateTransactionProps} options - Options for Gelato.\n     * @param {MetaTransactionData[]} [options.transactions] - The transactions batch.\n     * @param {boolean} [options.onlyCalls=false] - If true, MultiSendCallOnly contract should be used. Remember to not use delegate calls in the batch.\n     * @param {MetaTransactionOptions} [options.options={}] - Gas Options for the transaction batch.\n     * @returns {Promise<SafeTransaction>} Returns a promise that resolves to the created SafeTransaction.\n     * @private\n     */\n    async createTransactionWithHandlePayment({ transactions, onlyCalls = false, options = {} }) {\n        const { gasLimit } = options;\n        const nonce = await this.protocolKit.getNonce();\n        // this transaction is only used for gas estimations\n        const transactionToEstimateGas = await this.protocolKit.createTransaction({\n            transactions,\n            onlyCalls,\n            options: {\n                nonce\n            }\n        });\n        // as we set gasPrice to 1, safeTxGas is set to a non-zero value to prevent transaction failure due to out-of-gas errors. value see: https://github.com/safe-global/safe-contracts/blob/main/contracts/Safe.sol#L203\n        const gasPrice = '1';\n        const safeTxGas = await (0, protocol_kit_1.estimateSafeTxGas)(this.protocolKit, transactionToEstimateGas);\n        const gasToken = options.gasToken ?? constants_1.ZERO_ADDRESS;\n        const refundReceiver = this.getFeeCollector();\n        const chainId = await this.protocolKit.getChainId();\n        // if a custom gasLimit is provided, we do not need to estimate the gas cost\n        if (gasLimit) {\n            const paymentToGelato = await this.getEstimateFee({ chainId, gasLimit, gasToken });\n            const syncTransaction = await this.protocolKit.createTransaction({\n                transactions,\n                onlyCalls,\n                options: {\n                    baseGas: paymentToGelato,\n                    gasPrice,\n                    safeTxGas,\n                    gasToken,\n                    refundReceiver,\n                    nonce\n                }\n            });\n            return syncTransaction;\n        }\n        // If gasLimit is not provided, we need to estimate the gas cost.\n        const baseGas = await (0, protocol_kit_1.estimateTxBaseGas)(this.protocolKit, transactionToEstimateGas);\n        const safeDeploymentGasCost = await (0, protocol_kit_1.estimateSafeDeploymentGas)(this.protocolKit);\n        const totalGas = Number(baseGas) + // baseGas\n            Number(safeTxGas) + // safeTxGas\n            Number(safeDeploymentGasCost) + // Safe deploymet gas cost if it is required\n            constants_1.GELATO_GAS_EXECUTION_OVERHEAD; // Gelato execution overhead\n        const paymentToGelato = await this.getEstimateFee({\n            chainId,\n            gasLimit: String(totalGas),\n            gasToken\n        });\n        const syncTransaction = await this.protocolKit.createTransaction({\n            transactions,\n            onlyCalls,\n            options: {\n                baseGas: paymentToGelato, // payment to Gelato\n                gasPrice,\n                safeTxGas,\n                gasToken,\n                refundReceiver,\n                nonce\n            }\n        });\n        return syncTransaction;\n    }\n    /**\n     * Creates a Safe transaction designed to be executed using the Gelato Relayer and\n     * uses a separate ERC20 transfer to pay the fees to the Gelato relayer.\n     *\n     * @async\n     * @function createTransactionWithTransfer\n     * @param {GelatoCreateTransactionProps} options - Options for Gelato.\n     * @param {MetaTransactionData[]} [options.transactions] - The transactions batch.\n     * @param {boolean} [options.onlyCalls=false] - If true, MultiSendCallOnly contract should be used. Remember to not use delegate calls in the batch.\n     * @param {MetaTransactionOptions} [options.options={}] - Gas Options for the transaction batch.\n     * @returns {Promise<SafeTransaction>} Returns a promise that resolves to the created SafeTransaction.\n     * @private\n     */\n    async createTransactionWithTransfer({ transactions, onlyCalls = false, options = {} }) {\n        const { gasLimit } = options;\n        const nonce = await this.protocolKit.getNonce();\n        const gasToken = options.gasToken ?? constants_1.ZERO_ADDRESS;\n        // if a custom gasLimit is provided, we do not need to estimate the gas cost\n        if (gasLimit) {\n            const transferToGelato = await this.createPaymentToGelato(gasLimit, options);\n            const syncTransaction = await this.protocolKit.createTransaction({\n                transactions: [...transactions, transferToGelato],\n                onlyCalls,\n                options: {\n                    nonce,\n                    gasToken\n                }\n            });\n            return syncTransaction;\n        }\n        // If gasLimit is not provided, we need to estimate the gas cost.\n        // this transaction is only used for gas estimations\n        const transactionToEstimateGas = await this.protocolKit.createTransaction({\n            transactions,\n            onlyCalls,\n            options: {\n                nonce\n            }\n        });\n        const safeTxGas = await (0, protocol_kit_1.estimateSafeTxGas)(this.protocolKit, transactionToEstimateGas);\n        const baseGas = await (0, protocol_kit_1.estimateTxBaseGas)(this.protocolKit, transactionToEstimateGas);\n        const safeDeploymentGasCost = await (0, protocol_kit_1.estimateSafeDeploymentGas)(this.protocolKit);\n        const totalGas = Number(baseGas) + // baseGas\n            Number(safeTxGas) + // safeTxGas without Gelato payment transfer\n            Number(safeDeploymentGasCost) + // Safe deploymet gas cost if it is required\n            constants_1.GELATO_TRANSFER_GAS_COST + // Gelato payment transfer\n            constants_1.GELATO_GAS_EXECUTION_OVERHEAD; // Gelato execution overhead\n        const transferToGelato = await this.createPaymentToGelato(String(totalGas), options);\n        const syncTransaction = await this.protocolKit.createTransaction({\n            transactions: [...transactions, transferToGelato],\n            onlyCalls,\n            options: {\n                nonce,\n                gasToken\n            }\n        });\n        return syncTransaction;\n    }\n    async sendSponsorTransaction(target, encodedTransaction, chainId) {\n        if (!__classPrivateFieldGet(this, _GelatoRelayPack_apiKey, \"f\")) {\n            throw new Error('API key not defined');\n        }\n        const request = {\n            chainId,\n            target,\n            data: encodedTransaction\n        };\n        const response = await __classPrivateFieldGet(this, _GelatoRelayPack_gelatoRelay, \"f\").sponsoredCall(request, __classPrivateFieldGet(this, _GelatoRelayPack_apiKey, \"f\"));\n        return response;\n    }\n    async sendSyncTransaction(target, encodedTransaction, chainId, options) {\n        const { gasLimit, gasToken } = options;\n        const feeToken = this._getFeeToken(gasToken);\n        const request = {\n            chainId,\n            target,\n            data: encodedTransaction,\n            feeToken,\n            isRelayContext: false\n        };\n        const relayRequestOptions = {\n            gasLimit: gasLimit ? BigInt(gasLimit) : undefined\n        };\n        const response = await __classPrivateFieldGet(this, _GelatoRelayPack_gelatoRelay, \"f\").callWithSyncFee(request, relayRequestOptions);\n        return response;\n    }\n    async relayTransaction({ target, encodedTransaction, chainId, options = {} }) {\n        const response = options.isSponsored\n            ? this.sendSponsorTransaction(target, encodedTransaction, chainId)\n            : this.sendSyncTransaction(target, encodedTransaction, chainId, options);\n        return response;\n    }\n    /**\n     * @deprecated Use executeTransaction instead\n     */\n    async executeRelayTransaction(safeTransaction, options) {\n        return this.executeTransaction({ executable: safeTransaction, options });\n    }\n    /**\n     * Sends the Safe transaction to the Gelato Relayer for execution.\n     * If the Safe is not deployed, it creates a batch of transactions including the Safe deployment transaction.\n     *\n     * @param {GelatoExecuteTransactionProps} props - Execution props\n     * @param {SafeTransaction} props.executable - The Safe transaction to be executed.\n     * @param {MetaTransactionOptions} props.options - Options for the transaction.\n     * @returns {Promise<RelayResponse>} Returns a Promise that resolves with a RelayResponse object.\n     */\n    async executeTransaction({ executable: safeTransaction, options }) {\n        const isSafeDeployed = await this.protocolKit.isSafeDeployed();\n        const chainId = await this.protocolKit.getChainId();\n        const safeAddress = await this.protocolKit.getAddress();\n        const safeTransactionEncodedData = await this.protocolKit.getEncodedTransaction(safeTransaction);\n        const gasToken = options?.gasToken || safeTransaction.data.gasToken;\n        if (isSafeDeployed) {\n            const relayTransaction = {\n                target: safeAddress,\n                encodedTransaction: safeTransactionEncodedData,\n                chainId,\n                options: {\n                    ...options,\n                    gasToken\n                }\n            };\n            return this.relayTransaction(relayTransaction);\n        }\n        // if the Safe is not deployed we create a batch with the Safe deployment transaction and the provided Safe transaction\n        const safeDeploymentBatch = await this.protocolKit.wrapSafeTransactionIntoDeploymentBatch(safeTransaction);\n        const relayTransaction = {\n            target: safeDeploymentBatch.to, // multiSend Contract address\n            encodedTransaction: safeDeploymentBatch.data,\n            chainId,\n            options: {\n                ...options,\n                gasToken\n            }\n        };\n        return this.relayTransaction(relayTransaction);\n    }\n}\nexports.GelatoRelayPack = GelatoRelayPack;\n_GelatoRelayPack_gelatoRelay = new WeakMap(), _GelatoRelayPack_apiKey = new WeakMap();\n//# sourceMappingURL=GelatoRelayPack.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/gelato/GelatoRelayPack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/gelato/types.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/gelato/types.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3JlbGF5LWtpdEAzLjEuMF90eXBlc2NyaXB0QDUuNS4zL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvcmVsYXkta2l0L2Rpc3Qvc3JjL3BhY2tzL2dlbGF0by90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsid2VicGFjazovL3NhZmUtcGFzc2tleXMtdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3JlbGF5LWtpdEAzLjEuMF90eXBlc2NyaXB0QDUuNS4zL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvcmVsYXkta2l0L2Rpc3Qvc3JjL3BhY2tzL2dlbGF0by90eXBlcy5qcz85ZGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/gelato/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/Safe4337Pack.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/Safe4337Pack.js ***!
  \*******************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _Safe4337Pack_instances, _Safe4337Pack_BUNDLER_URL, _Safe4337Pack_ENTRYPOINT_ADDRESS, _Safe4337Pack_SAFE_4337_MODULE_ADDRESS, _Safe4337Pack_SAFE_WEBAUTHN_SHARED_SIGNER_ADDRESS, _Safe4337Pack_bundlerClient, _Safe4337Pack_chainId, _Safe4337Pack_paymasterOptions, _Safe4337Pack_toSafeOperation, _Safe4337Pack_timestamp, _Safe4337Pack_getSafeNonceFromEntrypoint, _Safe4337Pack_encodeExecuteUserOpCallData;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Safe4337Pack = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/.pnpm/ethers@6.13.1/node_modules/ethers/lib.commonjs/index.js\");\nconst satisfies_1 = __importDefault(__webpack_require__(/*! semver/functions/satisfies */ \"(ssr)/./node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/satisfies.js\"));\nconst protocol_kit_1 = __importStar(__webpack_require__(/*! @safe-global/protocol-kit */ \"(ssr)/./node_modules/.pnpm/@safe-global+protocol-kit@4.1.0_typescript@5.5.3/node_modules/@safe-global/protocol-kit/dist/src/index.js\"));\nconst RelayKitBasePack_1 = __webpack_require__(/*! ../../RelayKitBasePack */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/RelayKitBasePack.js\");\nconst safe_core_sdk_types_1 = __webpack_require__(/*! @safe-global/safe-core-sdk-types */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk-types@5.1.0_typescript@5.5.3/node_modules/@safe-global/safe-core-sdk-types/dist/src/index.js\");\nconst safe_modules_deployments_1 = __webpack_require__(/*! @safe-global/safe-modules-deployments */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-modules-deployments@2.2.1/node_modules/@safe-global/safe-modules-deployments/dist/index.js\");\nconst SafeOperation_1 = __importDefault(__webpack_require__(/*! ./SafeOperation */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/SafeOperation.js\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/utils.js\");\nconst entrypoint_1 = __webpack_require__(/*! ./utils/entrypoint */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/utils/entrypoint.js\");\nconst PimlicoFeeEstimator_1 = __webpack_require__(/*! ./estimators/PimlicoFeeEstimator */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/estimators/PimlicoFeeEstimator.js\");\nconst MAX_ERC20_AMOUNT_TO_APPROVE = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn;\nconst EQ_OR_GT_1_4_1 = '>=1.4.1';\n/**\n * Safe4337Pack class that extends RelayKitBasePack.\n * This class provides an implementation of the ERC-4337 that enables Safe accounts to wrk with UserOperations.\n * It allows to create, sign and execute transactions using the Safe 4337 Module.\n *\n * @class\n * @link https://github.com/safe-global/safe-modules/blob/main/modules/4337/contracts/Safe4337Module.sol\n * @link https://eips.ethereum.org/EIPS/eip-4337\n */\nclass Safe4337Pack extends RelayKitBasePack_1.RelayKitBasePack {\n    /**\n     * Creates an instance of the Safe4337Pack.\n     *\n     * @param {Safe4337Options} options - The initialization parameters.\n     */\n    constructor({ protocolKit, bundlerClient, bundlerUrl, chainId, paymasterOptions, entryPointAddress, safe4337ModuleAddress, safeWebAuthnSharedSignerAddress }) {\n        super(protocolKit);\n        _Safe4337Pack_instances.add(this);\n        _Safe4337Pack_BUNDLER_URL.set(this, void 0);\n        _Safe4337Pack_ENTRYPOINT_ADDRESS.set(this, void 0);\n        _Safe4337Pack_SAFE_4337_MODULE_ADDRESS.set(this, '0x');\n        _Safe4337Pack_SAFE_WEBAUTHN_SHARED_SIGNER_ADDRESS.set(this, '0x');\n        _Safe4337Pack_bundlerClient.set(this, void 0);\n        _Safe4337Pack_chainId.set(this, void 0);\n        _Safe4337Pack_paymasterOptions.set(this, void 0);\n        __classPrivateFieldSet(this, _Safe4337Pack_BUNDLER_URL, bundlerUrl, \"f\");\n        __classPrivateFieldSet(this, _Safe4337Pack_bundlerClient, bundlerClient, \"f\");\n        __classPrivateFieldSet(this, _Safe4337Pack_chainId, chainId, \"f\");\n        __classPrivateFieldSet(this, _Safe4337Pack_paymasterOptions, paymasterOptions, \"f\");\n        __classPrivateFieldSet(this, _Safe4337Pack_ENTRYPOINT_ADDRESS, entryPointAddress, \"f\");\n        __classPrivateFieldSet(this, _Safe4337Pack_SAFE_4337_MODULE_ADDRESS, safe4337ModuleAddress, \"f\");\n        __classPrivateFieldSet(this, _Safe4337Pack_SAFE_WEBAUTHN_SHARED_SIGNER_ADDRESS, safeWebAuthnSharedSignerAddress || '0x', \"f\");\n    }\n    /**\n     * Initializes a Safe4337Pack class.\n     * This method creates the protocolKit instance based on the input parameters.\n     * When the Safe address is provided, it will use the existing Safe.\n     * When the Safe address is not provided, it will use the predictedSafe feature with the provided owners and threshold.\n     * It will use the correct contract addresses for the fallbackHandler and the module and will add the data to enable the 4337 module.\n     *\n     * @param {Safe4337InitOptions} initOptions - The initialization parameters.\n     * @return {Promise<Safe4337Pack>} The Promise object that will be resolved into an instance of Safe4337Pack.\n     */\n    static async init(initOptions) {\n        const { provider, signer, options, bundlerUrl, customContracts, paymasterOptions } = initOptions;\n        let protocolKit;\n        const bundlerClient = (0, utils_1.getEip4337BundlerProvider)(bundlerUrl);\n        const chainId = await bundlerClient.send(constants_1.RPC_4337_CALLS.CHAIN_ID, []);\n        let addModulesLibAddress = customContracts?.addModulesLibAddress;\n        const network = parseInt(chainId, 16).toString();\n        const safeModulesVersion = initOptions.safeModulesVersion || constants_1.DEFAULT_SAFE_MODULES_VERSION;\n        if ((0, satisfies_1.default)(safeModulesVersion, entrypoint_1.EQ_OR_GT_0_3_0)) {\n            throw new Error(`Incompatibility detected: Safe modules version ${safeModulesVersion} is not supported. The SDK can use 0.2.0 only.`);\n        }\n        if (!addModulesLibAddress) {\n            const addModulesDeployment = (0, safe_modules_deployments_1.getAddModulesLibDeployment)({\n                released: true,\n                version: safeModulesVersion,\n                network\n            });\n            addModulesLibAddress = addModulesDeployment?.networkAddresses[network];\n        }\n        let safe4337ModuleAddress = customContracts?.safe4337ModuleAddress;\n        if (!safe4337ModuleAddress) {\n            const safe4337ModuleDeployment = (0, safe_modules_deployments_1.getSafe4337ModuleDeployment)({\n                released: true,\n                version: safeModulesVersion,\n                network\n            });\n            safe4337ModuleAddress = safe4337ModuleDeployment?.networkAddresses[network];\n        }\n        if (!addModulesLibAddress || !safe4337ModuleAddress) {\n            throw new Error(`Safe4337Module and/or AddModulesLib not available for chain ${network} and modules version ${safeModulesVersion}`);\n        }\n        let safeWebAuthnSharedSignerAddress = customContracts?.safeWebAuthnSharedSignerAddress;\n        // Existing Safe\n        if ('safeAddress' in options) {\n            protocolKit = await protocol_kit_1.default.init({\n                provider,\n                signer,\n                safeAddress: options.safeAddress\n            });\n            const safeVersion = await protocolKit.getContractVersion();\n            const isSafeVersion4337Compatible = (0, satisfies_1.default)(safeVersion, EQ_OR_GT_1_4_1);\n            if (!isSafeVersion4337Compatible) {\n                throw new Error(`Incompatibility detected: The current Safe Account version (${safeVersion}) is not supported. EIP-4337 requires the Safe to use at least v1.4.1.`);\n            }\n            const safeModules = (await protocolKit.getModules());\n            const is4337ModulePresent = safeModules.some((module) => module === safe4337ModuleAddress);\n            if (!is4337ModulePresent) {\n                throw new Error(`Incompatibility detected: The EIP-4337 module is not enabled in the provided Safe Account. Enable this module (address: ${safe4337ModuleAddress}) to add compatibility.`);\n            }\n            const safeFallbackhandler = await protocolKit.getFallbackHandler();\n            const is4337FallbackhandlerPresent = safeFallbackhandler === safe4337ModuleAddress;\n            if (!is4337FallbackhandlerPresent) {\n                throw new Error(`Incompatibility detected: The EIP-4337 fallbackhandler is not attached to the Safe Account. Attach this fallbackhandler (address: ${safe4337ModuleAddress}) to ensure compatibility.`);\n            }\n        }\n        else {\n            // New Safe will be created based on the provided configuration when bundling a new UserOperation\n            if (!options.owners || !options.threshold) {\n                throw new Error('Owners and threshold are required to deploy a new Safe');\n            }\n            const safeVersion = options.safeVersion || constants_1.DEFAULT_SAFE_VERSION;\n            // we need to create a batch to setup the 4337 Safe Account\n            // first setup transaction: Enable 4337 module\n            const enable4337ModuleTransaction = {\n                to: addModulesLibAddress,\n                value: '0',\n                data: constants_1.INTERFACES.encodeFunctionData('enableModules', [[safe4337ModuleAddress]]),\n                operation: safe_core_sdk_types_1.OperationType.DelegateCall // DelegateCall required for enabling the 4337 module\n            };\n            const setupTransactions = [enable4337ModuleTransaction];\n            const isApproveTransactionRequired = !!paymasterOptions &&\n                !paymasterOptions.isSponsored &&\n                !!paymasterOptions.paymasterTokenAddress;\n            if (isApproveTransactionRequired) {\n                const { paymasterAddress, amountToApprove = MAX_ERC20_AMOUNT_TO_APPROVE } = paymasterOptions;\n                // second transaction: approve ERC-20 paymaster token\n                const approveToPaymasterTransaction = {\n                    to: paymasterOptions.paymasterTokenAddress,\n                    data: constants_1.INTERFACES.encodeFunctionData('approve', [paymasterAddress, amountToApprove]),\n                    value: '0',\n                    operation: safe_core_sdk_types_1.OperationType.Call // Call for approve\n                };\n                setupTransactions.push(approveToPaymasterTransaction);\n            }\n            const safeProvider = await protocol_kit_1.SafeProvider.init(provider, signer, safeVersion);\n            // third transaction: passkey support via shared signer SafeWebAuthnSharedSigner\n            // see: https://github.com/safe-global/safe-modules/blob/main/modules/passkey/contracts/4337/experimental/README.md\n            const isPasskeySigner = await safeProvider.isPasskeySigner();\n            if (isPasskeySigner) {\n                if (!safeWebAuthnSharedSignerAddress) {\n                    const safeWebAuthnSharedSignerDeployment = (0, safe_modules_deployments_1.getSafeWebAuthnShareSignerDeployment)({\n                        released: true,\n                        version: '0.2.1',\n                        network\n                    });\n                    safeWebAuthnSharedSignerAddress =\n                        safeWebAuthnSharedSignerDeployment?.networkAddresses[network];\n                }\n                if (!safeWebAuthnSharedSignerAddress) {\n                    throw new Error(`safeWebAuthnSharedSignerAddress not available for chain ${network}`);\n                }\n                const passkeySigner = (await safeProvider.getExternalSigner());\n                if (!options.owners.includes(safeWebAuthnSharedSignerAddress)) {\n                    options.owners.push(safeWebAuthnSharedSignerAddress);\n                }\n                const passkeyOwnerConfiguration = {\n                    ...passkeySigner.coordinates,\n                    verifiers: passkeySigner.verifierAddress\n                };\n                const sharedSignerTransaction = {\n                    to: safeWebAuthnSharedSignerAddress,\n                    value: '0',\n                    data: constants_1.INTERFACES.encodeFunctionData('configure', [passkeyOwnerConfiguration]),\n                    operation: safe_core_sdk_types_1.OperationType.DelegateCall // DelegateCall required into the SafeWebAuthnSharedSigner instance in order for it to set its configuration.\n                };\n                setupTransactions.push(sharedSignerTransaction);\n            }\n            let deploymentTo;\n            let deploymentData;\n            const isBatch = setupTransactions.length > 1;\n            if (isBatch) {\n                const multiSendContract = await (0, protocol_kit_1.getMultiSendContract)({\n                    safeProvider,\n                    safeVersion\n                });\n                const batchData = constants_1.INTERFACES.encodeFunctionData('multiSend', [\n                    (0, protocol_kit_1.encodeMultiSendData)(setupTransactions)\n                ]);\n                deploymentTo = await multiSendContract.getAddress();\n                deploymentData = batchData;\n            }\n            else {\n                deploymentTo = enable4337ModuleTransaction.to;\n                deploymentData = enable4337ModuleTransaction.data;\n            }\n            protocolKit = await protocol_kit_1.default.init({\n                provider,\n                signer,\n                predictedSafe: {\n                    safeDeploymentConfig: {\n                        safeVersion,\n                        saltNonce: options.saltNonce || undefined\n                    },\n                    safeAccountConfig: {\n                        owners: options.owners,\n                        threshold: options.threshold,\n                        to: deploymentTo,\n                        data: deploymentData,\n                        fallbackHandler: safe4337ModuleAddress,\n                        paymentToken: ethers_1.ethers.ZeroAddress,\n                        payment: 0,\n                        paymentReceiver: ethers_1.ethers.ZeroAddress\n                    }\n                }\n            });\n        }\n        let selectedEntryPoint;\n        if (customContracts?.entryPointAddress) {\n            const requiredSafeModulesVersion = (0, entrypoint_1.entryPointToSafeModules)(customContracts?.entryPointAddress);\n            if (!(0, satisfies_1.default)(safeModulesVersion, requiredSafeModulesVersion))\n                throw new Error(`The selected entrypoint ${customContracts?.entryPointAddress} is not compatible with version ${safeModulesVersion} of Safe modules`);\n            selectedEntryPoint = customContracts?.entryPointAddress;\n        }\n        else {\n            const supportedEntryPoints = await bundlerClient.send(constants_1.RPC_4337_CALLS.SUPPORTED_ENTRY_POINTS, []);\n            if (!supportedEntryPoints.length) {\n                throw new Error('No entrypoint provided or available through the bundler');\n            }\n            selectedEntryPoint = supportedEntryPoints.find((entryPoint) => {\n                const requiredSafeModulesVersion = (0, entrypoint_1.entryPointToSafeModules)(entryPoint);\n                return (0, satisfies_1.default)(safeModulesVersion, requiredSafeModulesVersion);\n            });\n            if (!selectedEntryPoint) {\n                throw new Error(`Incompatibility detected: None of the entrypoints provided by the bundler is compatible with the Safe modules version ${safeModulesVersion}`);\n            }\n        }\n        return new Safe4337Pack({\n            chainId: BigInt(chainId),\n            protocolKit,\n            bundlerClient,\n            paymasterOptions,\n            bundlerUrl,\n            entryPointAddress: selectedEntryPoint,\n            safe4337ModuleAddress,\n            safeWebAuthnSharedSignerAddress\n        });\n    }\n    /**\n     * Estimates gas for the SafeOperation.\n     *\n     * @param {EstimateFeeProps} props - The parameters for the gas estimation.\n     * @param {EthSafeOperation} props.safeOperation - The SafeOperation to estimate the gas.\n     * @param {IFeeEstimator} props.feeEstimator - The function to estimate the gas.\n     * @return {Promise<EthSafeOperation>} The Promise object that will be resolved into the gas estimation.\n     */\n    async getEstimateFee({ safeOperation, feeEstimator = new PimlicoFeeEstimator_1.PimlicoFeeEstimator() }) {\n        const threshold = await this.protocolKit.getThreshold();\n        const setupEstimationData = await feeEstimator?.setupEstimation?.({\n            bundlerUrl: __classPrivateFieldGet(this, _Safe4337Pack_BUNDLER_URL, \"f\"),\n            entryPoint: __classPrivateFieldGet(this, _Safe4337Pack_ENTRYPOINT_ADDRESS, \"f\"),\n            userOperation: safeOperation.toUserOperation()\n        });\n        if (setupEstimationData) {\n            safeOperation.addEstimations(setupEstimationData);\n        }\n        const estimateUserOperationGas = await __classPrivateFieldGet(this, _Safe4337Pack_bundlerClient, \"f\").send(constants_1.RPC_4337_CALLS.ESTIMATE_USER_OPERATION_GAS, [\n            (0, utils_1.userOperationToHexValues)((0, utils_1.addDummySignature)(safeOperation.toUserOperation(), __classPrivateFieldGet(this, _Safe4337Pack_SAFE_WEBAUTHN_SHARED_SIGNER_ADDRESS, \"f\"), threshold)),\n            __classPrivateFieldGet(this, _Safe4337Pack_ENTRYPOINT_ADDRESS, \"f\")\n        ]);\n        if (estimateUserOperationGas) {\n            safeOperation.addEstimations({\n                preVerificationGas: BigInt(estimateUserOperationGas.preVerificationGas),\n                verificationGasLimit: BigInt(estimateUserOperationGas.verificationGasLimit),\n                callGasLimit: BigInt(estimateUserOperationGas.callGasLimit)\n            });\n        }\n        const adjustEstimationData = await feeEstimator?.adjustEstimation?.({\n            bundlerUrl: __classPrivateFieldGet(this, _Safe4337Pack_BUNDLER_URL, \"f\"),\n            entryPoint: __classPrivateFieldGet(this, _Safe4337Pack_ENTRYPOINT_ADDRESS, \"f\"),\n            userOperation: safeOperation.toUserOperation()\n        });\n        if (adjustEstimationData) {\n            safeOperation.addEstimations(adjustEstimationData);\n        }\n        if (__classPrivateFieldGet(this, _Safe4337Pack_paymasterOptions, \"f\")?.isSponsored) {\n            if (!__classPrivateFieldGet(this, _Safe4337Pack_paymasterOptions, \"f\").paymasterUrl) {\n                throw new Error('No paymaster url provided for a sponsored transaction');\n            }\n            const paymasterEstimation = await feeEstimator?.getPaymasterEstimation?.({\n                userOperation: (0, utils_1.addDummySignature)(safeOperation.toUserOperation(), __classPrivateFieldGet(this, _Safe4337Pack_SAFE_WEBAUTHN_SHARED_SIGNER_ADDRESS, \"f\"), threshold),\n                paymasterUrl: __classPrivateFieldGet(this, _Safe4337Pack_paymasterOptions, \"f\").paymasterUrl,\n                entryPoint: __classPrivateFieldGet(this, _Safe4337Pack_ENTRYPOINT_ADDRESS, \"f\"),\n                sponsorshipPolicyId: __classPrivateFieldGet(this, _Safe4337Pack_paymasterOptions, \"f\").sponsorshipPolicyId\n            });\n            safeOperation.data.paymasterAndData =\n                paymasterEstimation?.paymasterAndData || safeOperation.data.paymasterAndData;\n            if (paymasterEstimation) {\n                safeOperation.addEstimations(paymasterEstimation);\n            }\n        }\n        return safeOperation;\n    }\n    /**\n     * Creates a relayed transaction based on the provided parameters.\n     *\n     * @param {MetaTransactionData[]} transactions - The transactions to batch in a SafeOperation.\n     * @param options - Optional configuration options for the transaction creation.\n     * @return {Promise<EthSafeOperation>} The Promise object will resolve a SafeOperation.\n     */\n    async createTransaction({ transactions, options = {} }) {\n        const safeAddress = await this.protocolKit.getAddress();\n        const nonce = await __classPrivateFieldGet(this, _Safe4337Pack_instances, \"m\", _Safe4337Pack_getSafeNonceFromEntrypoint).call(this, safeAddress);\n        const { amountToApprove, validUntil, validAfter, feeEstimator } = options;\n        if (amountToApprove) {\n            const paymasterOptions = __classPrivateFieldGet(this, _Safe4337Pack_paymasterOptions, \"f\");\n            if (!paymasterOptions.paymasterTokenAddress) {\n                throw new Error('Paymaster must be initialized');\n            }\n            const approveToPaymasterTransaction = {\n                to: paymasterOptions.paymasterTokenAddress,\n                data: constants_1.INTERFACES.encodeFunctionData('approve', [\n                    paymasterOptions.paymasterAddress,\n                    amountToApprove\n                ]),\n                value: '0',\n                operation: safe_core_sdk_types_1.OperationType.Call // Call for approve\n            };\n            transactions.push(approveToPaymasterTransaction);\n        }\n        const isBatch = transactions.length > 1;\n        const multiSendAddress = await this.protocolKit.getMultiSendAddress();\n        const callData = isBatch\n            ? __classPrivateFieldGet(this, _Safe4337Pack_instances, \"m\", _Safe4337Pack_encodeExecuteUserOpCallData).call(this, {\n                to: multiSendAddress,\n                value: '0',\n                data: (0, utils_1.encodeMultiSendCallData)(transactions),\n                operation: safe_core_sdk_types_1.OperationType.DelegateCall\n            })\n            : __classPrivateFieldGet(this, _Safe4337Pack_instances, \"m\", _Safe4337Pack_encodeExecuteUserOpCallData).call(this, transactions[0]);\n        const paymasterAndData = __classPrivateFieldGet(this, _Safe4337Pack_paymasterOptions, \"f\") && 'paymasterAddress' in __classPrivateFieldGet(this, _Safe4337Pack_paymasterOptions, \"f\")\n            ? __classPrivateFieldGet(this, _Safe4337Pack_paymasterOptions, \"f\").paymasterAddress\n            : '0x';\n        const userOperation = {\n            sender: safeAddress,\n            nonce: nonce,\n            initCode: '0x',\n            callData,\n            callGasLimit: 1n,\n            verificationGasLimit: 1n,\n            preVerificationGas: 1n,\n            maxFeePerGas: 1n,\n            maxPriorityFeePerGas: 1n,\n            paymasterAndData,\n            signature: '0x'\n        };\n        const isSafeDeployed = await this.protocolKit.isSafeDeployed();\n        if (!isSafeDeployed) {\n            userOperation.initCode = await this.protocolKit.getInitCode();\n        }\n        const safeOperation = new SafeOperation_1.default(userOperation, {\n            chainId: __classPrivateFieldGet(this, _Safe4337Pack_chainId, \"f\"),\n            moduleAddress: __classPrivateFieldGet(this, _Safe4337Pack_SAFE_4337_MODULE_ADDRESS, \"f\"),\n            entryPoint: __classPrivateFieldGet(this, _Safe4337Pack_ENTRYPOINT_ADDRESS, \"f\"),\n            validUntil,\n            validAfter\n        });\n        return await this.getEstimateFee({\n            safeOperation,\n            feeEstimator\n        });\n    }\n    /**\n     * Signs a safe operation.\n     *\n     * @param {EthSafeOperation | SafeOperationResponse} safeOperation - The SafeOperation to sign. It can be:\n     * - A response from the API (Tx Service)\n     * - An instance of EthSafeOperation\n     * @param {SigningMethod} signingMethod - The signing method to use.\n     * @return {Promise<EthSafeOperation>} The Promise object will resolve to the signed SafeOperation.\n     */\n    async signSafeOperation(safeOperation, signingMethod = protocol_kit_1.SigningMethod.ETH_SIGN_TYPED_DATA_V4) {\n        let safeOp;\n        if ((0, safe_core_sdk_types_1.isSafeOperationResponse)(safeOperation)) {\n            safeOp = __classPrivateFieldGet(this, _Safe4337Pack_instances, \"m\", _Safe4337Pack_toSafeOperation).call(this, safeOperation);\n        }\n        else {\n            safeOp = safeOperation;\n        }\n        const safeProvider = this.protocolKit.getSafeProvider();\n        const signerAddress = await safeProvider.getSignerAddress();\n        const isPasskeySigner = await safeProvider.isPasskeySigner();\n        if (!signerAddress) {\n            throw new Error('There is no signer address available to sign the SafeOperation');\n        }\n        const isOwner = await this.protocolKit.isOwner(signerAddress);\n        const isSafeDeployed = await this.protocolKit.isSafeDeployed();\n        if ((!isOwner && isSafeDeployed) || (!isSafeDeployed && !isPasskeySigner && !isOwner)) {\n            throw new Error('UserOperations can only be signed by Safe owners');\n        }\n        let signature;\n        if (isPasskeySigner) {\n            const safeOpHash = safeOp.getHash();\n            // if the Safe is not deployed we force the Shared Signer signature\n            if (!isSafeDeployed) {\n                const passkeySignature = await this.protocolKit.signHash(safeOpHash);\n                // SafeWebAuthnSharedSigner signature\n                signature = new protocol_kit_1.EthSafeSignature(__classPrivateFieldGet(this, _Safe4337Pack_SAFE_WEBAUTHN_SHARED_SIGNER_ADDRESS, \"f\"), passkeySignature.data, true // passkeys are contract signatures\n                );\n            }\n            else {\n                signature = await this.protocolKit.signHash(safeOpHash);\n            }\n        }\n        else {\n            if (signingMethod in\n                [\n                    protocol_kit_1.SigningMethod.ETH_SIGN_TYPED_DATA_V4,\n                    protocol_kit_1.SigningMethod.ETH_SIGN_TYPED_DATA_V3,\n                    protocol_kit_1.SigningMethod.ETH_SIGN_TYPED_DATA\n                ]) {\n                signature = await (0, utils_1.signSafeOp)(safeOp.data, this.protocolKit.getSafeProvider(), __classPrivateFieldGet(this, _Safe4337Pack_SAFE_4337_MODULE_ADDRESS, \"f\"));\n            }\n            else {\n                const safeOpHash = safeOp.getHash();\n                signature = await this.protocolKit.signHash(safeOpHash);\n            }\n        }\n        const signedSafeOperation = new SafeOperation_1.default(safeOp.toUserOperation(), {\n            chainId: __classPrivateFieldGet(this, _Safe4337Pack_chainId, \"f\"),\n            moduleAddress: __classPrivateFieldGet(this, _Safe4337Pack_SAFE_4337_MODULE_ADDRESS, \"f\"),\n            entryPoint: __classPrivateFieldGet(this, _Safe4337Pack_ENTRYPOINT_ADDRESS, \"f\"),\n            validUntil: safeOp.data.validUntil,\n            validAfter: safeOp.data.validAfter\n        });\n        safeOp.signatures.forEach((signature) => {\n            signedSafeOperation.addSignature(signature);\n        });\n        signedSafeOperation.addSignature(signature);\n        return signedSafeOperation;\n    }\n    /**\n     * Executes the relay transaction.\n     *\n     * @param {Safe4337ExecutableProps} props - The parameters for the transaction execution.\n     * @param {EthSafeOperation | SafeOperationResponse} props.executable - The SafeOperation to execute. It can be:\n     * - A response from the API (Tx Service)\n     * - An instance of EthSafeOperation\n     * @return {Promise<string>} The user operation hash.\n     */\n    async executeTransaction({ executable }) {\n        let safeOperation;\n        if ((0, safe_core_sdk_types_1.isSafeOperationResponse)(executable)) {\n            safeOperation = __classPrivateFieldGet(this, _Safe4337Pack_instances, \"m\", _Safe4337Pack_toSafeOperation).call(this, executable);\n        }\n        else {\n            safeOperation = executable;\n        }\n        const userOperation = safeOperation.toUserOperation();\n        return __classPrivateFieldGet(this, _Safe4337Pack_bundlerClient, \"f\").send(constants_1.RPC_4337_CALLS.SEND_USER_OPERATION, [\n            (0, utils_1.userOperationToHexValues)(userOperation),\n            __classPrivateFieldGet(this, _Safe4337Pack_ENTRYPOINT_ADDRESS, \"f\")\n        ]);\n    }\n    /**\n     * Return a UserOperation based on a hash (userOpHash) returned by eth_sendUserOperation\n     *\n     * @param {string} userOpHash - The hash of the user operation to fetch. Returned from the #sendUserOperation method\n     * @returns {UserOperation} - null in case the UserOperation is not yet included in a block, or a full UserOperation, with the addition of entryPoint, blockNumber, blockHash and transactionHash\n     */\n    async getUserOperationByHash(userOpHash) {\n        return __classPrivateFieldGet(this, _Safe4337Pack_bundlerClient, \"f\").send(constants_1.RPC_4337_CALLS.GET_USER_OPERATION_BY_HASH, [userOpHash]);\n    }\n    /**\n     * Return a UserOperation receipt based on a hash (userOpHash) returned by eth_sendUserOperation\n     *\n     * @param {string} userOpHash - The hash of the user operation to fetch. Returned from the #sendUserOperation method\n     * @returns {UserOperationReceipt} - null in case the UserOperation is not yet included in a block, or UserOperationReceipt object\n     */\n    async getUserOperationReceipt(userOpHash) {\n        return __classPrivateFieldGet(this, _Safe4337Pack_bundlerClient, \"f\").send(constants_1.RPC_4337_CALLS.GET_USER_OPERATION_RECEIPT, [userOpHash]);\n    }\n    /**\n     * Returns an array of the entryPoint addresses supported by the client.\n     * The first element of the array SHOULD be the entryPoint addressed preferred by the client.\n     *\n     * @returns {string[]} - The supported entry points.\n     */\n    async getSupportedEntryPoints() {\n        return __classPrivateFieldGet(this, _Safe4337Pack_bundlerClient, \"f\").send(constants_1.RPC_4337_CALLS.SUPPORTED_ENTRY_POINTS, []);\n    }\n    /**\n     * Returns EIP-155 Chain ID.\n     *\n     * @returns {string} - The chain id.\n     */\n    async getChainId() {\n        return __classPrivateFieldGet(this, _Safe4337Pack_bundlerClient, \"f\").send(constants_1.RPC_4337_CALLS.CHAIN_ID, []);\n    }\n}\nexports.Safe4337Pack = Safe4337Pack;\n_Safe4337Pack_BUNDLER_URL = new WeakMap(), _Safe4337Pack_ENTRYPOINT_ADDRESS = new WeakMap(), _Safe4337Pack_SAFE_4337_MODULE_ADDRESS = new WeakMap(), _Safe4337Pack_SAFE_WEBAUTHN_SHARED_SIGNER_ADDRESS = new WeakMap(), _Safe4337Pack_bundlerClient = new WeakMap(), _Safe4337Pack_chainId = new WeakMap(), _Safe4337Pack_paymasterOptions = new WeakMap(), _Safe4337Pack_instances = new WeakSet(), _Safe4337Pack_toSafeOperation = function _Safe4337Pack_toSafeOperation(safeOperationResponse) {\n    const { validUntil, validAfter, userOperation } = safeOperationResponse;\n    const safeOperation = new SafeOperation_1.default({\n        sender: userOperation?.sender || '0x',\n        nonce: userOperation?.nonce?.toString() || '0',\n        initCode: userOperation?.initCode || '',\n        callData: userOperation?.callData || '',\n        callGasLimit: BigInt(userOperation?.callGasLimit || 0n),\n        verificationGasLimit: BigInt(userOperation?.verificationGasLimit || 0),\n        preVerificationGas: BigInt(userOperation?.preVerificationGas || 0),\n        maxFeePerGas: BigInt(userOperation?.maxFeePerGas || 0),\n        maxPriorityFeePerGas: BigInt(userOperation?.maxPriorityFeePerGas || 0),\n        paymasterAndData: ethers_1.ethers.hexlify(ethers_1.ethers.concat([userOperation?.paymaster || '0x', userOperation?.paymasterData || '0x'])),\n        signature: safeOperationResponse.preparedSignature || '0x'\n    }, {\n        chainId: __classPrivateFieldGet(this, _Safe4337Pack_chainId, \"f\"),\n        moduleAddress: __classPrivateFieldGet(this, _Safe4337Pack_SAFE_4337_MODULE_ADDRESS, \"f\"),\n        entryPoint: userOperation?.entryPoint || __classPrivateFieldGet(this, _Safe4337Pack_ENTRYPOINT_ADDRESS, \"f\"),\n        validAfter: __classPrivateFieldGet(this, _Safe4337Pack_instances, \"m\", _Safe4337Pack_timestamp).call(this, validAfter),\n        validUntil: __classPrivateFieldGet(this, _Safe4337Pack_instances, \"m\", _Safe4337Pack_timestamp).call(this, validUntil)\n    });\n    if (safeOperationResponse.confirmations) {\n        safeOperationResponse.confirmations.forEach((confirmation) => {\n            safeOperation.addSignature(new protocol_kit_1.EthSafeSignature(confirmation.owner, confirmation.signature));\n        });\n    }\n    return safeOperation;\n}, _Safe4337Pack_timestamp = function _Safe4337Pack_timestamp(date) {\n    return date ? new Date(date).getTime() / 1000 : undefined;\n}, _Safe4337Pack_getSafeNonceFromEntrypoint = \n/**\n * Gets account nonce from the bundler.\n *\n * @param {string} safeAddress - Account address for which the nonce is to be fetched.\n * @returns {Promise<string>} The Promise object will resolve to the account nonce.\n */\nasync function _Safe4337Pack_getSafeNonceFromEntrypoint(safeAddress) {\n    const abi = [\n        {\n            inputs: [\n                { name: 'sender', type: 'address' },\n                { name: 'key', type: 'uint192' }\n            ],\n            name: 'getNonce',\n            outputs: [{ name: 'nonce', type: 'uint256' }],\n            stateMutability: 'view',\n            type: 'function'\n        }\n    ];\n    const contract = new ethers_1.ethers.Contract(__classPrivateFieldGet(this, _Safe4337Pack_ENTRYPOINT_ADDRESS, \"f\") || '0x', abi, this.protocolKit.getSafeProvider().getExternalProvider());\n    const newNonce = await contract.getNonce(safeAddress, BigInt(0));\n    return newNonce.toString();\n}, _Safe4337Pack_encodeExecuteUserOpCallData = function _Safe4337Pack_encodeExecuteUserOpCallData(transaction) {\n    return constants_1.INTERFACES.encodeFunctionData('executeUserOp', [\n        transaction.to,\n        transaction.value,\n        transaction.data,\n        transaction.operation || safe_core_sdk_types_1.OperationType.Call\n    ]);\n};\n//# sourceMappingURL=Safe4337Pack.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/Safe4337Pack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/SafeOperation.js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/SafeOperation.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/.pnpm/ethers@6.13.1/node_modules/ethers/lib.commonjs/index.js\");\nconst protocol_kit_1 = __webpack_require__(/*! @safe-global/protocol-kit */ \"(ssr)/./node_modules/.pnpm/@safe-global+protocol-kit@4.1.0_typescript@5.5.3/node_modules/@safe-global/protocol-kit/dist/src/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/utils.js\");\nclass EthSafeOperation {\n    constructor(userOperation, { chainId, entryPoint, validAfter, validUntil, moduleAddress }) {\n        this.signatures = new Map();\n        this.chainId = chainId;\n        this.moduleAddress = moduleAddress;\n        this.data = {\n            safe: userOperation.sender,\n            nonce: BigInt(userOperation.nonce),\n            initCode: userOperation.initCode,\n            callData: userOperation.callData,\n            callGasLimit: userOperation.callGasLimit,\n            verificationGasLimit: userOperation.verificationGasLimit,\n            preVerificationGas: userOperation.preVerificationGas,\n            maxFeePerGas: userOperation.maxFeePerGas,\n            maxPriorityFeePerGas: userOperation.maxPriorityFeePerGas,\n            paymasterAndData: userOperation.paymasterAndData,\n            validAfter: validAfter || 0,\n            validUntil: validUntil || 0,\n            entryPoint\n        };\n    }\n    getSignature(signer) {\n        return this.signatures.get(signer.toLowerCase());\n    }\n    addSignature(signature) {\n        this.signatures.set(signature.signer.toLowerCase(), signature);\n    }\n    encodedSignatures() {\n        return (0, protocol_kit_1.buildSignatureBytes)(Array.from(this.signatures.values()));\n    }\n    addEstimations(estimations) {\n        const keys = [\n            'maxFeePerGas',\n            'maxPriorityFeePerGas',\n            'verificationGasLimit',\n            'preVerificationGas',\n            'callGasLimit'\n        ];\n        for (const key of keys) {\n            this.data[key] = BigInt(estimations[key] || this.data[key]);\n        }\n    }\n    toUserOperation() {\n        return {\n            sender: this.data.safe,\n            nonce: ethers_1.ethers.toBeHex(this.data.nonce),\n            initCode: this.data.initCode,\n            callData: this.data.callData,\n            callGasLimit: this.data.callGasLimit,\n            verificationGasLimit: this.data.verificationGasLimit,\n            preVerificationGas: this.data.preVerificationGas,\n            maxFeePerGas: this.data.maxFeePerGas,\n            maxPriorityFeePerGas: this.data.maxPriorityFeePerGas,\n            paymasterAndData: this.data.paymasterAndData,\n            signature: ethers_1.ethers.solidityPacked(['uint48', 'uint48', 'bytes'], [this.data.validAfter, this.data.validUntil, this.encodedSignatures()])\n        };\n    }\n    getHash() {\n        return (0, utils_1.calculateSafeUserOperationHash)(this.data, this.chainId, this.moduleAddress);\n    }\n}\nexports[\"default\"] = EthSafeOperation;\n//# sourceMappingURL=SafeOperation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3JlbGF5LWtpdEAzLjEuMF90eXBlc2NyaXB0QDUuNS4zL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvcmVsYXkta2l0L2Rpc3Qvc3JjL3BhY2tzL3NhZmUtNDMzNy9TYWZlT3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixtQkFBTyxDQUFDLGtHQUFRO0FBQ2pDLHVCQUF1QixtQkFBTyxDQUFDLHVLQUEyQjtBQUMxRCxnQkFBZ0IsbUJBQU8sQ0FBQywrSkFBUztBQUNqQztBQUNBLGlDQUFpQyw0REFBNEQ7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYWZlLXBhc3NrZXlzLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzYWZlLWdsb2JhbCtyZWxheS1raXRAMy4xLjBfdHlwZXNjcmlwdEA1LjUuMy9ub2RlX21vZHVsZXMvQHNhZmUtZ2xvYmFsL3JlbGF5LWtpdC9kaXN0L3NyYy9wYWNrcy9zYWZlLTQzMzcvU2FmZU9wZXJhdGlvbi5qcz81MGVmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXRoZXJzXzEgPSByZXF1aXJlKFwiZXRoZXJzXCIpO1xuY29uc3QgcHJvdG9jb2xfa2l0XzEgPSByZXF1aXJlKFwiQHNhZmUtZ2xvYmFsL3Byb3RvY29sLWtpdFwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNsYXNzIEV0aFNhZmVPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHVzZXJPcGVyYXRpb24sIHsgY2hhaW5JZCwgZW50cnlQb2ludCwgdmFsaWRBZnRlciwgdmFsaWRVbnRpbCwgbW9kdWxlQWRkcmVzcyB9KSB7XG4gICAgICAgIHRoaXMuc2lnbmF0dXJlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5jaGFpbklkID0gY2hhaW5JZDtcbiAgICAgICAgdGhpcy5tb2R1bGVBZGRyZXNzID0gbW9kdWxlQWRkcmVzcztcbiAgICAgICAgdGhpcy5kYXRhID0ge1xuICAgICAgICAgICAgc2FmZTogdXNlck9wZXJhdGlvbi5zZW5kZXIsXG4gICAgICAgICAgICBub25jZTogQmlnSW50KHVzZXJPcGVyYXRpb24ubm9uY2UpLFxuICAgICAgICAgICAgaW5pdENvZGU6IHVzZXJPcGVyYXRpb24uaW5pdENvZGUsXG4gICAgICAgICAgICBjYWxsRGF0YTogdXNlck9wZXJhdGlvbi5jYWxsRGF0YSxcbiAgICAgICAgICAgIGNhbGxHYXNMaW1pdDogdXNlck9wZXJhdGlvbi5jYWxsR2FzTGltaXQsXG4gICAgICAgICAgICB2ZXJpZmljYXRpb25HYXNMaW1pdDogdXNlck9wZXJhdGlvbi52ZXJpZmljYXRpb25HYXNMaW1pdCxcbiAgICAgICAgICAgIHByZVZlcmlmaWNhdGlvbkdhczogdXNlck9wZXJhdGlvbi5wcmVWZXJpZmljYXRpb25HYXMsXG4gICAgICAgICAgICBtYXhGZWVQZXJHYXM6IHVzZXJPcGVyYXRpb24ubWF4RmVlUGVyR2FzLFxuICAgICAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IHVzZXJPcGVyYXRpb24ubWF4UHJpb3JpdHlGZWVQZXJHYXMsXG4gICAgICAgICAgICBwYXltYXN0ZXJBbmREYXRhOiB1c2VyT3BlcmF0aW9uLnBheW1hc3RlckFuZERhdGEsXG4gICAgICAgICAgICB2YWxpZEFmdGVyOiB2YWxpZEFmdGVyIHx8IDAsXG4gICAgICAgICAgICB2YWxpZFVudGlsOiB2YWxpZFVudGlsIHx8IDAsXG4gICAgICAgICAgICBlbnRyeVBvaW50XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldFNpZ25hdHVyZShzaWduZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmF0dXJlcy5nZXQoc2lnbmVyLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cbiAgICBhZGRTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gICAgICAgIHRoaXMuc2lnbmF0dXJlcy5zZXQoc2lnbmF0dXJlLnNpZ25lci50b0xvd2VyQ2FzZSgpLCBzaWduYXR1cmUpO1xuICAgIH1cbiAgICBlbmNvZGVkU2lnbmF0dXJlcygpIHtcbiAgICAgICAgcmV0dXJuICgwLCBwcm90b2NvbF9raXRfMS5idWlsZFNpZ25hdHVyZUJ5dGVzKShBcnJheS5mcm9tKHRoaXMuc2lnbmF0dXJlcy52YWx1ZXMoKSkpO1xuICAgIH1cbiAgICBhZGRFc3RpbWF0aW9ucyhlc3RpbWF0aW9ucykge1xuICAgICAgICBjb25zdCBrZXlzID0gW1xuICAgICAgICAgICAgJ21heEZlZVBlckdhcycsXG4gICAgICAgICAgICAnbWF4UHJpb3JpdHlGZWVQZXJHYXMnLFxuICAgICAgICAgICAgJ3ZlcmlmaWNhdGlvbkdhc0xpbWl0JyxcbiAgICAgICAgICAgICdwcmVWZXJpZmljYXRpb25HYXMnLFxuICAgICAgICAgICAgJ2NhbGxHYXNMaW1pdCdcbiAgICAgICAgXTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICAgICAgdGhpcy5kYXRhW2tleV0gPSBCaWdJbnQoZXN0aW1hdGlvbnNba2V5XSB8fCB0aGlzLmRhdGFba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9Vc2VyT3BlcmF0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmRhdGEuc2FmZSxcbiAgICAgICAgICAgIG5vbmNlOiBldGhlcnNfMS5ldGhlcnMudG9CZUhleCh0aGlzLmRhdGEubm9uY2UpLFxuICAgICAgICAgICAgaW5pdENvZGU6IHRoaXMuZGF0YS5pbml0Q29kZSxcbiAgICAgICAgICAgIGNhbGxEYXRhOiB0aGlzLmRhdGEuY2FsbERhdGEsXG4gICAgICAgICAgICBjYWxsR2FzTGltaXQ6IHRoaXMuZGF0YS5jYWxsR2FzTGltaXQsXG4gICAgICAgICAgICB2ZXJpZmljYXRpb25HYXNMaW1pdDogdGhpcy5kYXRhLnZlcmlmaWNhdGlvbkdhc0xpbWl0LFxuICAgICAgICAgICAgcHJlVmVyaWZpY2F0aW9uR2FzOiB0aGlzLmRhdGEucHJlVmVyaWZpY2F0aW9uR2FzLFxuICAgICAgICAgICAgbWF4RmVlUGVyR2FzOiB0aGlzLmRhdGEubWF4RmVlUGVyR2FzLFxuICAgICAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IHRoaXMuZGF0YS5tYXhQcmlvcml0eUZlZVBlckdhcyxcbiAgICAgICAgICAgIHBheW1hc3RlckFuZERhdGE6IHRoaXMuZGF0YS5wYXltYXN0ZXJBbmREYXRhLFxuICAgICAgICAgICAgc2lnbmF0dXJlOiBldGhlcnNfMS5ldGhlcnMuc29saWRpdHlQYWNrZWQoWyd1aW50NDgnLCAndWludDQ4JywgJ2J5dGVzJ10sIFt0aGlzLmRhdGEudmFsaWRBZnRlciwgdGhpcy5kYXRhLnZhbGlkVW50aWwsIHRoaXMuZW5jb2RlZFNpZ25hdHVyZXMoKV0pXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldEhhc2goKSB7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5jYWxjdWxhdGVTYWZlVXNlck9wZXJhdGlvbkhhc2gpKHRoaXMuZGF0YSwgdGhpcy5jaGFpbklkLCB0aGlzLm1vZHVsZUFkZHJlc3MpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEV0aFNhZmVPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TYWZlT3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/SafeOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/constants.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/constants.js ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RPC_4337_CALLS = exports.ENTRYPOINT_ADDRESS_V07 = exports.ENTRYPOINT_ADDRESS_V06 = exports.INTERFACES = exports.EIP712_SAFE_OPERATION_TYPE = exports.DEFAULT_SAFE_MODULES_VERSION = exports.DEFAULT_SAFE_VERSION = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/.pnpm/ethers@6.13.1/node_modules/ethers/lib.commonjs/index.js\");\nexports.DEFAULT_SAFE_VERSION = '1.4.1';\nexports.DEFAULT_SAFE_MODULES_VERSION = '0.2.0';\nexports.EIP712_SAFE_OPERATION_TYPE = {\n    SafeOp: [\n        { type: 'address', name: 'safe' },\n        { type: 'uint256', name: 'nonce' },\n        { type: 'bytes', name: 'initCode' },\n        { type: 'bytes', name: 'callData' },\n        { type: 'uint256', name: 'callGasLimit' },\n        { type: 'uint256', name: 'verificationGasLimit' },\n        { type: 'uint256', name: 'preVerificationGas' },\n        { type: 'uint256', name: 'maxFeePerGas' },\n        { type: 'uint256', name: 'maxPriorityFeePerGas' },\n        { type: 'bytes', name: 'paymasterAndData' },\n        { type: 'uint48', name: 'validAfter' },\n        { type: 'uint48', name: 'validUntil' },\n        { type: 'address', name: 'entryPoint' }\n    ]\n};\nexports.INTERFACES = new ethers_1.ethers.Interface([\n    'function enableModules(address[])',\n    'function multiSend(bytes memory transactions) public payable',\n    'function executeUserOp(address to, uint256 value, bytes data, uint8 operation)',\n    'function approve(address _spender, uint256 _value)',\n    'function configure((uint256 x, uint256 y, uint176 verifiers) signer)'\n]);\nexports.ENTRYPOINT_ADDRESS_V06 = '0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789';\nexports.ENTRYPOINT_ADDRESS_V07 = '0x0000000071727De22E5E9d8BAf0edAc6f37da032';\nexports.RPC_4337_CALLS = {\n    ESTIMATE_USER_OPERATION_GAS: 'eth_estimateUserOperationGas',\n    SEND_USER_OPERATION: 'eth_sendUserOperation',\n    GET_USER_OPERATION_BY_HASH: 'eth_getUserOperationByHash',\n    GET_USER_OPERATION_RECEIPT: 'eth_getUserOperationReceipt',\n    SUPPORTED_ENTRY_POINTS: 'eth_supportedEntryPoints',\n    CHAIN_ID: 'eth_chainId',\n    SPONSOR_USER_OPERATION: 'pm_sponsorUserOperation'\n};\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3JlbGF5LWtpdEAzLjEuMF90eXBlc2NyaXB0QDUuNS4zL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvcmVsYXkta2l0L2Rpc3Qvc3JjL3BhY2tzL3NhZmUtNDMzNy9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsOEJBQThCLEdBQUcsOEJBQThCLEdBQUcsa0JBQWtCLEdBQUcsa0NBQWtDLEdBQUcsb0NBQW9DLEdBQUcsNEJBQTRCO0FBQ3hOLGlCQUFpQixtQkFBTyxDQUFDLGtHQUFRO0FBQ2pDLDRCQUE0QjtBQUM1QixvQ0FBb0M7QUFDcEMsa0NBQWtDO0FBQ2xDO0FBQ0EsVUFBVSwrQkFBK0I7QUFDekMsVUFBVSxnQ0FBZ0M7QUFDMUMsVUFBVSxpQ0FBaUM7QUFDM0MsVUFBVSxpQ0FBaUM7QUFDM0MsVUFBVSx1Q0FBdUM7QUFDakQsVUFBVSwrQ0FBK0M7QUFDekQsVUFBVSw2Q0FBNkM7QUFDdkQsVUFBVSx1Q0FBdUM7QUFDakQsVUFBVSwrQ0FBK0M7QUFDekQsVUFBVSx5Q0FBeUM7QUFDbkQsVUFBVSxvQ0FBb0M7QUFDOUMsVUFBVSxvQ0FBb0M7QUFDOUMsVUFBVTtBQUNWO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCLDhCQUE4QjtBQUM5QixzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FmZS1wYXNza2V5cy10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FmZS1nbG9iYWwrcmVsYXkta2l0QDMuMS4wX3R5cGVzY3JpcHRANS41LjMvbm9kZV9tb2R1bGVzL0BzYWZlLWdsb2JhbC9yZWxheS1raXQvZGlzdC9zcmMvcGFja3Mvc2FmZS00MzM3L2NvbnN0YW50cy5qcz8zMjBiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SUENfNDMzN19DQUxMUyA9IGV4cG9ydHMuRU5UUllQT0lOVF9BRERSRVNTX1YwNyA9IGV4cG9ydHMuRU5UUllQT0lOVF9BRERSRVNTX1YwNiA9IGV4cG9ydHMuSU5URVJGQUNFUyA9IGV4cG9ydHMuRUlQNzEyX1NBRkVfT1BFUkFUSU9OX1RZUEUgPSBleHBvcnRzLkRFRkFVTFRfU0FGRV9NT0RVTEVTX1ZFUlNJT04gPSBleHBvcnRzLkRFRkFVTFRfU0FGRV9WRVJTSU9OID0gdm9pZCAwO1xuY29uc3QgZXRoZXJzXzEgPSByZXF1aXJlKFwiZXRoZXJzXCIpO1xuZXhwb3J0cy5ERUZBVUxUX1NBRkVfVkVSU0lPTiA9ICcxLjQuMSc7XG5leHBvcnRzLkRFRkFVTFRfU0FGRV9NT0RVTEVTX1ZFUlNJT04gPSAnMC4yLjAnO1xuZXhwb3J0cy5FSVA3MTJfU0FGRV9PUEVSQVRJT05fVFlQRSA9IHtcbiAgICBTYWZlT3A6IFtcbiAgICAgICAgeyB0eXBlOiAnYWRkcmVzcycsIG5hbWU6ICdzYWZlJyB9LFxuICAgICAgICB7IHR5cGU6ICd1aW50MjU2JywgbmFtZTogJ25vbmNlJyB9LFxuICAgICAgICB7IHR5cGU6ICdieXRlcycsIG5hbWU6ICdpbml0Q29kZScgfSxcbiAgICAgICAgeyB0eXBlOiAnYnl0ZXMnLCBuYW1lOiAnY2FsbERhdGEnIH0sXG4gICAgICAgIHsgdHlwZTogJ3VpbnQyNTYnLCBuYW1lOiAnY2FsbEdhc0xpbWl0JyB9LFxuICAgICAgICB7IHR5cGU6ICd1aW50MjU2JywgbmFtZTogJ3ZlcmlmaWNhdGlvbkdhc0xpbWl0JyB9LFxuICAgICAgICB7IHR5cGU6ICd1aW50MjU2JywgbmFtZTogJ3ByZVZlcmlmaWNhdGlvbkdhcycgfSxcbiAgICAgICAgeyB0eXBlOiAndWludDI1NicsIG5hbWU6ICdtYXhGZWVQZXJHYXMnIH0sXG4gICAgICAgIHsgdHlwZTogJ3VpbnQyNTYnLCBuYW1lOiAnbWF4UHJpb3JpdHlGZWVQZXJHYXMnIH0sXG4gICAgICAgIHsgdHlwZTogJ2J5dGVzJywgbmFtZTogJ3BheW1hc3RlckFuZERhdGEnIH0sXG4gICAgICAgIHsgdHlwZTogJ3VpbnQ0OCcsIG5hbWU6ICd2YWxpZEFmdGVyJyB9LFxuICAgICAgICB7IHR5cGU6ICd1aW50NDgnLCBuYW1lOiAndmFsaWRVbnRpbCcgfSxcbiAgICAgICAgeyB0eXBlOiAnYWRkcmVzcycsIG5hbWU6ICdlbnRyeVBvaW50JyB9XG4gICAgXVxufTtcbmV4cG9ydHMuSU5URVJGQUNFUyA9IG5ldyBldGhlcnNfMS5ldGhlcnMuSW50ZXJmYWNlKFtcbiAgICAnZnVuY3Rpb24gZW5hYmxlTW9kdWxlcyhhZGRyZXNzW10pJyxcbiAgICAnZnVuY3Rpb24gbXVsdGlTZW5kKGJ5dGVzIG1lbW9yeSB0cmFuc2FjdGlvbnMpIHB1YmxpYyBwYXlhYmxlJyxcbiAgICAnZnVuY3Rpb24gZXhlY3V0ZVVzZXJPcChhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlLCBieXRlcyBkYXRhLCB1aW50OCBvcGVyYXRpb24pJyxcbiAgICAnZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSknLFxuICAgICdmdW5jdGlvbiBjb25maWd1cmUoKHVpbnQyNTYgeCwgdWludDI1NiB5LCB1aW50MTc2IHZlcmlmaWVycykgc2lnbmVyKSdcbl0pO1xuZXhwb3J0cy5FTlRSWVBPSU5UX0FERFJFU1NfVjA2ID0gJzB4NUZGMTM3RDRiMEZEQ0Q0OURjQTMwYzdDRjU3RTU3OGEwMjZkMjc4OSc7XG5leHBvcnRzLkVOVFJZUE9JTlRfQUREUkVTU19WMDcgPSAnMHgwMDAwMDAwMDcxNzI3RGUyMkU1RTlkOEJBZjBlZEFjNmYzN2RhMDMyJztcbmV4cG9ydHMuUlBDXzQzMzdfQ0FMTFMgPSB7XG4gICAgRVNUSU1BVEVfVVNFUl9PUEVSQVRJT05fR0FTOiAnZXRoX2VzdGltYXRlVXNlck9wZXJhdGlvbkdhcycsXG4gICAgU0VORF9VU0VSX09QRVJBVElPTjogJ2V0aF9zZW5kVXNlck9wZXJhdGlvbicsXG4gICAgR0VUX1VTRVJfT1BFUkFUSU9OX0JZX0hBU0g6ICdldGhfZ2V0VXNlck9wZXJhdGlvbkJ5SGFzaCcsXG4gICAgR0VUX1VTRVJfT1BFUkFUSU9OX1JFQ0VJUFQ6ICdldGhfZ2V0VXNlck9wZXJhdGlvblJlY2VpcHQnLFxuICAgIFNVUFBPUlRFRF9FTlRSWV9QT0lOVFM6ICdldGhfc3VwcG9ydGVkRW50cnlQb2ludHMnLFxuICAgIENIQUlOX0lEOiAnZXRoX2NoYWluSWQnLFxuICAgIFNQT05TT1JfVVNFUl9PUEVSQVRJT046ICdwbV9zcG9uc29yVXNlck9wZXJhdGlvbidcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/estimators/PimlicoFeeEstimator.js":
/*!*************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/estimators/PimlicoFeeEstimator.js ***!
  \*************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _PimlicoFeeEstimator_instances, _PimlicoFeeEstimator_getFeeData;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PimlicoFeeEstimator = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/utils.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/constants.js\");\nclass PimlicoFeeEstimator {\n    constructor() {\n        _PimlicoFeeEstimator_instances.add(this);\n    }\n    async setupEstimation({ bundlerUrl }) {\n        const bundlerClient = (0, utils_1.getEip4337BundlerProvider)(bundlerUrl);\n        const feeData = await __classPrivateFieldGet(this, _PimlicoFeeEstimator_instances, \"m\", _PimlicoFeeEstimator_getFeeData).call(this, bundlerClient);\n        return feeData;\n    }\n    async adjustEstimation({ userOperation }) {\n        return {\n            callGasLimit: userOperation.callGasLimit + userOperation.callGasLimit / 2n, // +50%\n            verificationGasLimit: userOperation.verificationGasLimit * 4n, // +300%\n            preVerificationGas: userOperation.preVerificationGas + userOperation.preVerificationGas / 20n // +5%\n        };\n    }\n    async getPaymasterEstimation({ userOperation, paymasterUrl, entryPoint, sponsorshipPolicyId }) {\n        const paymasterClient = (0, utils_1.getEip4337BundlerProvider)(paymasterUrl);\n        const params = sponsorshipPolicyId\n            ? [(0, utils_1.userOperationToHexValues)(userOperation), entryPoint, { sponsorshipPolicyId }]\n            : [(0, utils_1.userOperationToHexValues)(userOperation), entryPoint];\n        const gasEstimate = await paymasterClient.send(constants_1.RPC_4337_CALLS.SPONSOR_USER_OPERATION, params);\n        return gasEstimate;\n    }\n}\nexports.PimlicoFeeEstimator = PimlicoFeeEstimator;\n_PimlicoFeeEstimator_instances = new WeakSet(), _PimlicoFeeEstimator_getFeeData = async function _PimlicoFeeEstimator_getFeeData(bundlerClient) {\n    const { fast } = await bundlerClient.send('pimlico_getUserOperationGasPrice', []);\n    return fast;\n};\n//# sourceMappingURL=PimlicoFeeEstimator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3JlbGF5LWtpdEAzLjEuMF90eXBlc2NyaXB0QDUuNS4zL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvcmVsYXkta2l0L2Rpc3Qvc3JjL3BhY2tzL3NhZmUtNDMzNy9lc3RpbWF0b3JzL1BpbWxpY29GZWVFc3RpbWF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLGdCQUFnQixtQkFBTyxDQUFDLGdLQUFVO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLHdLQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFlBQVk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsZUFBZTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsOERBQThEO0FBQ2pHO0FBQ0E7QUFDQSxtRkFBbUYscUJBQXFCO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FmZS1wYXNza2V5cy10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FmZS1nbG9iYWwrcmVsYXkta2l0QDMuMS4wX3R5cGVzY3JpcHRANS41LjMvbm9kZV9tb2R1bGVzL0BzYWZlLWdsb2JhbC9yZWxheS1raXQvZGlzdC9zcmMvcGFja3Mvc2FmZS00MzM3L2VzdGltYXRvcnMvUGltbGljb0ZlZUVzdGltYXRvci5qcz8yY2JjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1BpbWxpY29GZWVFc3RpbWF0b3JfaW5zdGFuY2VzLCBfUGltbGljb0ZlZUVzdGltYXRvcl9nZXRGZWVEYXRhO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QaW1saWNvRmVlRXN0aW1hdG9yID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNsYXNzIFBpbWxpY29GZWVFc3RpbWF0b3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBfUGltbGljb0ZlZUVzdGltYXRvcl9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgIH1cbiAgICBhc3luYyBzZXR1cEVzdGltYXRpb24oeyBidW5kbGVyVXJsIH0pIHtcbiAgICAgICAgY29uc3QgYnVuZGxlckNsaWVudCA9ICgwLCB1dGlsc18xLmdldEVpcDQzMzdCdW5kbGVyUHJvdmlkZXIpKGJ1bmRsZXJVcmwpO1xuICAgICAgICBjb25zdCBmZWVEYXRhID0gYXdhaXQgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUGltbGljb0ZlZUVzdGltYXRvcl9pbnN0YW5jZXMsIFwibVwiLCBfUGltbGljb0ZlZUVzdGltYXRvcl9nZXRGZWVEYXRhKS5jYWxsKHRoaXMsIGJ1bmRsZXJDbGllbnQpO1xuICAgICAgICByZXR1cm4gZmVlRGF0YTtcbiAgICB9XG4gICAgYXN5bmMgYWRqdXN0RXN0aW1hdGlvbih7IHVzZXJPcGVyYXRpb24gfSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2FsbEdhc0xpbWl0OiB1c2VyT3BlcmF0aW9uLmNhbGxHYXNMaW1pdCArIHVzZXJPcGVyYXRpb24uY2FsbEdhc0xpbWl0IC8gMm4sIC8vICs1MCVcbiAgICAgICAgICAgIHZlcmlmaWNhdGlvbkdhc0xpbWl0OiB1c2VyT3BlcmF0aW9uLnZlcmlmaWNhdGlvbkdhc0xpbWl0ICogNG4sIC8vICszMDAlXG4gICAgICAgICAgICBwcmVWZXJpZmljYXRpb25HYXM6IHVzZXJPcGVyYXRpb24ucHJlVmVyaWZpY2F0aW9uR2FzICsgdXNlck9wZXJhdGlvbi5wcmVWZXJpZmljYXRpb25HYXMgLyAyMG4gLy8gKzUlXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIGdldFBheW1hc3RlckVzdGltYXRpb24oeyB1c2VyT3BlcmF0aW9uLCBwYXltYXN0ZXJVcmwsIGVudHJ5UG9pbnQsIHNwb25zb3JzaGlwUG9saWN5SWQgfSkge1xuICAgICAgICBjb25zdCBwYXltYXN0ZXJDbGllbnQgPSAoMCwgdXRpbHNfMS5nZXRFaXA0MzM3QnVuZGxlclByb3ZpZGVyKShwYXltYXN0ZXJVcmwpO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBzcG9uc29yc2hpcFBvbGljeUlkXG4gICAgICAgICAgICA/IFsoMCwgdXRpbHNfMS51c2VyT3BlcmF0aW9uVG9IZXhWYWx1ZXMpKHVzZXJPcGVyYXRpb24pLCBlbnRyeVBvaW50LCB7IHNwb25zb3JzaGlwUG9saWN5SWQgfV1cbiAgICAgICAgICAgIDogWygwLCB1dGlsc18xLnVzZXJPcGVyYXRpb25Ub0hleFZhbHVlcykodXNlck9wZXJhdGlvbiksIGVudHJ5UG9pbnRdO1xuICAgICAgICBjb25zdCBnYXNFc3RpbWF0ZSA9IGF3YWl0IHBheW1hc3RlckNsaWVudC5zZW5kKGNvbnN0YW50c18xLlJQQ180MzM3X0NBTExTLlNQT05TT1JfVVNFUl9PUEVSQVRJT04sIHBhcmFtcyk7XG4gICAgICAgIHJldHVybiBnYXNFc3RpbWF0ZTtcbiAgICB9XG59XG5leHBvcnRzLlBpbWxpY29GZWVFc3RpbWF0b3IgPSBQaW1saWNvRmVlRXN0aW1hdG9yO1xuX1BpbWxpY29GZWVFc3RpbWF0b3JfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1BpbWxpY29GZWVFc3RpbWF0b3JfZ2V0RmVlRGF0YSA9IGFzeW5jIGZ1bmN0aW9uIF9QaW1saWNvRmVlRXN0aW1hdG9yX2dldEZlZURhdGEoYnVuZGxlckNsaWVudCkge1xuICAgIGNvbnN0IHsgZmFzdCB9ID0gYXdhaXQgYnVuZGxlckNsaWVudC5zZW5kKCdwaW1saWNvX2dldFVzZXJPcGVyYXRpb25HYXNQcmljZScsIFtdKTtcbiAgICByZXR1cm4gZmFzdDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QaW1saWNvRmVlRXN0aW1hdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/estimators/PimlicoFeeEstimator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/estimators/index.js":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/estimators/index.js ***!
  \***********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PimlicoFeeEstimator = void 0;\nconst PimlicoFeeEstimator_1 = __webpack_require__(/*! ./PimlicoFeeEstimator */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/estimators/PimlicoFeeEstimator.js\");\nObject.defineProperty(exports, \"PimlicoFeeEstimator\", ({ enumerable: true, get: function () { return PimlicoFeeEstimator_1.PimlicoFeeEstimator; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3JlbGF5LWtpdEAzLjEuMF90eXBlc2NyaXB0QDUuNS4zL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvcmVsYXkta2l0L2Rpc3Qvc3JjL3BhY2tzL3NhZmUtNDMzNy9lc3RpbWF0b3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQiw4QkFBOEIsbUJBQU8sQ0FBQyxzTUFBdUI7QUFDN0QsdURBQXNELEVBQUUscUNBQXFDLHFEQUFxRCxFQUFDO0FBQ25KIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FmZS1wYXNza2V5cy10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FmZS1nbG9iYWwrcmVsYXkta2l0QDMuMS4wX3R5cGVzY3JpcHRANS41LjMvbm9kZV9tb2R1bGVzL0BzYWZlLWdsb2JhbC9yZWxheS1raXQvZGlzdC9zcmMvcGFja3Mvc2FmZS00MzM3L2VzdGltYXRvcnMvaW5kZXguanM/NjJmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGltbGljb0ZlZUVzdGltYXRvciA9IHZvaWQgMDtcbmNvbnN0IFBpbWxpY29GZWVFc3RpbWF0b3JfMSA9IHJlcXVpcmUoXCIuL1BpbWxpY29GZWVFc3RpbWF0b3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQaW1saWNvRmVlRXN0aW1hdG9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBQaW1saWNvRmVlRXN0aW1hdG9yXzEuUGltbGljb0ZlZUVzdGltYXRvcjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/estimators/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/types.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/types.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3JlbGF5LWtpdEAzLjEuMF90eXBlc2NyaXB0QDUuNS4zL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvcmVsYXkta2l0L2Rpc3Qvc3JjL3BhY2tzL3NhZmUtNDMzNy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsid2VicGFjazovL3NhZmUtcGFzc2tleXMtdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3JlbGF5LWtpdEAzLjEuMF90eXBlc2NyaXB0QDUuNS4zL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvcmVsYXkta2l0L2Rpc3Qvc3JjL3BhY2tzL3NhZmUtNDMzNy90eXBlcy5qcz9kYWY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/utils.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/utils.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getSignatureBytes = exports.addDummySignature = exports.DUMMY_AUTHENTICATOR_DATA = exports.DUMMY_CLIENT_DATA_FIELDS = exports.userOperationToHexValues = exports.calculateSafeUserOperationHash = exports.encodeMultiSendCallData = exports.signSafeOp = exports.getEip4337BundlerProvider = void 0;\nconst safe_core_sdk_types_1 = __webpack_require__(/*! @safe-global/safe-core-sdk-types */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk-types@5.1.0_typescript@5.5.3/node_modules/@safe-global/safe-core-sdk-types/dist/src/index.js\");\nconst protocol_kit_1 = __webpack_require__(/*! @safe-global/protocol-kit */ \"(ssr)/./node_modules/.pnpm/@safe-global+protocol-kit@4.1.0_typescript@5.5.3/node_modules/@safe-global/protocol-kit/dist/src/index.js\");\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/.pnpm/ethers@6.13.1/node_modules/ethers/lib.commonjs/index.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/constants.js\");\n/**\n * Gets the EIP-4337 bundler provider.\n *\n * @param {string} bundlerUrl The EIP-4337 bundler URL.\n * @return {Provider} The EIP-4337 bundler provider.\n */\nfunction getEip4337BundlerProvider(bundlerUrl) {\n    const provider = new ethers_1.ethers.JsonRpcProvider(bundlerUrl, undefined, {\n        batchMaxCount: 1\n    });\n    return provider;\n}\nexports.getEip4337BundlerProvider = getEip4337BundlerProvider;\n/**\n * Signs typed data.\n *\n * @param {SafeUserOperation} safeUserOperation - Safe user operation to sign.\n * @param {SafeProvider} safeProvider - Safe provider.\n * @param {string} safe4337ModuleAddress - Safe 4337 module address.\n * @return {Promise<SafeSignature>} The SafeSignature object containing the data and the signatures.\n */\nasync function signSafeOp(safeUserOperation, safeProvider, safe4337ModuleAddress) {\n    const signer = (await safeProvider.getExternalSigner());\n    const chainId = await safeProvider.getChainId();\n    const signerAddress = await signer.getAddress();\n    const signature = await signer.signTypedData({\n        chainId,\n        verifyingContract: safe4337ModuleAddress\n    }, constants_1.EIP712_SAFE_OPERATION_TYPE, {\n        ...safeUserOperation,\n        nonce: ethers_1.ethers.toBeHex(safeUserOperation.nonce),\n        validAfter: ethers_1.ethers.toBeHex(safeUserOperation.validAfter),\n        validUntil: ethers_1.ethers.toBeHex(safeUserOperation.validUntil),\n        maxFeePerGas: ethers_1.ethers.toBeHex(safeUserOperation.maxFeePerGas),\n        maxPriorityFeePerGas: ethers_1.ethers.toBeHex(safeUserOperation.maxPriorityFeePerGas)\n    });\n    return new protocol_kit_1.EthSafeSignature(signerAddress, signature);\n}\nexports.signSafeOp = signSafeOp;\n/**\n * Encodes multi-send data from transactions batch.\n *\n * @param {MetaTransactionData[]} transactions - an array of transaction to to be encoded.\n * @return {string} The encoded data string.\n */\nfunction encodeMultiSendCallData(transactions) {\n    return constants_1.INTERFACES.encodeFunctionData('multiSend', [\n        (0, protocol_kit_1.encodeMultiSendData)(transactions.map((tx) => ({ ...tx, operation: tx.operation ?? safe_core_sdk_types_1.OperationType.Call })))\n    ]);\n}\nexports.encodeMultiSendCallData = encodeMultiSendCallData;\n/**\n * Gets the safe user operation hash.\n *\n * @param {SafeUserOperation} safeUserOperation - The SafeUserOperation.\n * @param {bigint} chainId - The chain id.\n * @param {string} safe4337ModuleAddress - The Safe 4337 module address.\n * @return {string} The hash of the safe operation.\n */\nfunction calculateSafeUserOperationHash(safeUserOperation, chainId, safe4337ModuleAddress) {\n    return ethers_1.ethers.TypedDataEncoder.hash({\n        chainId,\n        verifyingContract: safe4337ModuleAddress\n    }, constants_1.EIP712_SAFE_OPERATION_TYPE, safeUserOperation);\n}\nexports.calculateSafeUserOperationHash = calculateSafeUserOperationHash;\n/**\n * Converts various bigint values from a UserOperation to their hexadecimal representation.\n *\n * @param {UserOperation} userOperation - The UserOperation object whose values are to be converted.\n * @returns {UserOperation} A new UserOperation object with the values converted to hexadecimal.\n */\nfunction userOperationToHexValues(userOperation) {\n    const userOperationWithHexValues = {\n        ...userOperation,\n        nonce: ethers_1.ethers.toBeHex(userOperation.nonce),\n        callGasLimit: ethers_1.ethers.toBeHex(userOperation.callGasLimit),\n        verificationGasLimit: ethers_1.ethers.toBeHex(userOperation.verificationGasLimit),\n        preVerificationGas: ethers_1.ethers.toBeHex(userOperation.preVerificationGas),\n        maxFeePerGas: ethers_1.ethers.toBeHex(userOperation.maxFeePerGas),\n        maxPriorityFeePerGas: ethers_1.ethers.toBeHex(userOperation.maxPriorityFeePerGas)\n    };\n    return userOperationWithHexValues;\n}\nexports.userOperationToHexValues = userOperationToHexValues;\n/**\n * Passkey Dummy client data JSON fields. This can be used for gas estimations, as it pads the fields enough\n * to account for variations in WebAuthn implementations.\n */\nexports.DUMMY_CLIENT_DATA_FIELDS = [\n    `\"origin\":\"https://safe.global\"`,\n    `\"padding\":\"This pads the clientDataJSON so that we can leave room for additional implementation specific fields for a more accurate 'preVerificationGas' estimate.\"`\n].join(',');\n/**\n * Dummy authenticator data. This can be used for gas estimations, as it ensures that the correct\n * authenticator flags are set.\n */\nexports.DUMMY_AUTHENTICATOR_DATA = new Uint8Array(37);\n// Authenticator data is the concatenation of:\n// - 32 byte SHA-256 hash of the relying party ID\n// - 1 byte for the user verification flag\n// - 4 bytes for the signature count\n// We fill it all with `0xfe` and set the appropriate user verification flag.\nexports.DUMMY_AUTHENTICATOR_DATA.fill(0xfe);\nexports.DUMMY_AUTHENTICATOR_DATA[32] = 0x04;\n/**\n * This method creates a dummy signature for the SafeOperation based on the Safe threshold. We assume that all owners are passkeys\n * This is useful for gas estimations\n * @param userOperation - The user operation\n * @param signer - The signer\n * @param threshold - The Safe threshold\n * @returns The user operation with the dummy passkey signature\n */\nfunction addDummySignature(userOperation, signer, threshold) {\n    const signatures = [];\n    for (let i = 0; i < threshold; i++) {\n        const isContractSignature = true;\n        const passkeySignature = getSignatureBytes({\n            authenticatorData: exports.DUMMY_AUTHENTICATOR_DATA,\n            clientDataFields: exports.DUMMY_CLIENT_DATA_FIELDS,\n            r: BigInt(`0x${'ec'.repeat(32)}`),\n            s: BigInt(`0x${'d5a'.repeat(21)}f`)\n        });\n        signatures.push(new protocol_kit_1.EthSafeSignature(signer, passkeySignature, isContractSignature));\n    }\n    return {\n        ...userOperation,\n        signature: ethers_1.ethers.solidityPacked(['uint48', 'uint48', 'bytes'], [0, 0, (0, protocol_kit_1.buildSignatureBytes)(signatures)])\n    };\n}\nexports.addDummySignature = addDummySignature;\n/**\n * Encodes the given WebAuthn signature into a string. This computes the ABI-encoded signature parameters:\n * ```solidity\n * abi.encode(authenticatorData, clientDataFields, r, s);\n * ```\n *\n * @param authenticatorData - The authenticator data as a Uint8Array.\n * @param clientDataFields - The client data fields as a string.\n * @param r - The value of r as a bigint.\n * @param s - The value of s as a bigint.\n * @returns The encoded string.\n */\nfunction getSignatureBytes({ authenticatorData, clientDataFields, r, s }) {\n    // Helper functions\n    // Convert a number to a 64-byte hex string with padded upto Hex string with 32 bytes\n    const encodeUint256 = (x) => x.toString(16).padStart(64, '0');\n    // Calculate the byte size of the dynamic data along with the length parameter alligned to 32 bytes\n    const byteSize = (data) => 32 * (Math.ceil(data.length / 32) + 1); // +1 is for the length parameter\n    // Encode dynamic data padded with zeros if necessary in 32 bytes chunks\n    const encodeBytes = (data) => `${encodeUint256(data.length)}${ethers_1.ethers.hexlify(data).slice(2)}`.padEnd(byteSize(data) * 2, '0');\n    // authenticatorData starts after the first four words.\n    const authenticatorDataOffset = 32 * 4;\n    // clientDataFields starts immediately after the authenticator data.\n    const clientDataFieldsOffset = authenticatorDataOffset + byteSize(authenticatorData);\n    return ('0x' +\n        encodeUint256(authenticatorDataOffset) +\n        encodeUint256(clientDataFieldsOffset) +\n        encodeUint256(r) +\n        encodeUint256(s) +\n        encodeBytes(authenticatorData) +\n        encodeBytes(new TextEncoder().encode(clientDataFields)));\n}\nexports.getSignatureBytes = getSignatureBytes;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/utils/entrypoint.js":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/utils/entrypoint.js ***!
  \***********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isEntryPointV6 = exports.entryPointToSafeModules = exports.sameString = exports.EQ_OR_GT_0_3_0 = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/constants.js\");\nconst EQ_0_2_0 = '0.2.0';\nexports.EQ_OR_GT_0_3_0 = '>=0.3.0';\nfunction sameString(str1, str2) {\n    return str1.toLowerCase() === str2.toLowerCase();\n}\nexports.sameString = sameString;\nfunction entryPointToSafeModules(entryPoint) {\n    const moduleVersionToEntryPoint = {\n        [constants_1.ENTRYPOINT_ADDRESS_V06]: EQ_0_2_0,\n        [constants_1.ENTRYPOINT_ADDRESS_V07]: exports.EQ_OR_GT_0_3_0\n    };\n    return moduleVersionToEntryPoint[entryPoint];\n}\nexports.entryPointToSafeModules = entryPointToSafeModules;\nfunction isEntryPointV6(address) {\n    return sameString(address, constants_1.ENTRYPOINT_ADDRESS_V06);\n}\nexports.isEntryPointV6 = isEntryPointV6;\n//# sourceMappingURL=entrypoint.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3JlbGF5LWtpdEAzLjEuMF90eXBlc2NyaXB0QDUuNS4zL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvcmVsYXkta2l0L2Rpc3Qvc3JjL3BhY2tzL3NhZmUtNDMzNy91dGlscy9lbnRyeXBvaW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLCtCQUErQixHQUFHLGtCQUFrQixHQUFHLHNCQUFzQjtBQUN0RyxvQkFBb0IsbUJBQU8sQ0FBQyx3S0FBYztBQUMxQztBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FmZS1wYXNza2V5cy10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FmZS1nbG9iYWwrcmVsYXkta2l0QDMuMS4wX3R5cGVzY3JpcHRANS41LjMvbm9kZV9tb2R1bGVzL0BzYWZlLWdsb2JhbC9yZWxheS1raXQvZGlzdC9zcmMvcGFja3Mvc2FmZS00MzM3L3V0aWxzL2VudHJ5cG9pbnQuanM/MzNiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNFbnRyeVBvaW50VjYgPSBleHBvcnRzLmVudHJ5UG9pbnRUb1NhZmVNb2R1bGVzID0gZXhwb3J0cy5zYW1lU3RyaW5nID0gZXhwb3J0cy5FUV9PUl9HVF8wXzNfMCA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNvbnN0IEVRXzBfMl8wID0gJzAuMi4wJztcbmV4cG9ydHMuRVFfT1JfR1RfMF8zXzAgPSAnPj0wLjMuMCc7XG5mdW5jdGlvbiBzYW1lU3RyaW5nKHN0cjEsIHN0cjIpIHtcbiAgICByZXR1cm4gc3RyMS50b0xvd2VyQ2FzZSgpID09PSBzdHIyLnRvTG93ZXJDYXNlKCk7XG59XG5leHBvcnRzLnNhbWVTdHJpbmcgPSBzYW1lU3RyaW5nO1xuZnVuY3Rpb24gZW50cnlQb2ludFRvU2FmZU1vZHVsZXMoZW50cnlQb2ludCkge1xuICAgIGNvbnN0IG1vZHVsZVZlcnNpb25Ub0VudHJ5UG9pbnQgPSB7XG4gICAgICAgIFtjb25zdGFudHNfMS5FTlRSWVBPSU5UX0FERFJFU1NfVjA2XTogRVFfMF8yXzAsXG4gICAgICAgIFtjb25zdGFudHNfMS5FTlRSWVBPSU5UX0FERFJFU1NfVjA3XTogZXhwb3J0cy5FUV9PUl9HVF8wXzNfMFxuICAgIH07XG4gICAgcmV0dXJuIG1vZHVsZVZlcnNpb25Ub0VudHJ5UG9pbnRbZW50cnlQb2ludF07XG59XG5leHBvcnRzLmVudHJ5UG9pbnRUb1NhZmVNb2R1bGVzID0gZW50cnlQb2ludFRvU2FmZU1vZHVsZXM7XG5mdW5jdGlvbiBpc0VudHJ5UG9pbnRWNihhZGRyZXNzKSB7XG4gICAgcmV0dXJuIHNhbWVTdHJpbmcoYWRkcmVzcywgY29uc3RhbnRzXzEuRU5UUllQT0lOVF9BRERSRVNTX1YwNik7XG59XG5leHBvcnRzLmlzRW50cnlQb2ludFY2ID0gaXNFbnRyeVBvaW50VjY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnRyeXBvaW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+relay-kit@3.1.0_typescript@5.5.3/node_modules/@safe-global/relay-kit/dist/src/packs/safe-4337/utils/entrypoint.js\n");

/***/ })

};
;